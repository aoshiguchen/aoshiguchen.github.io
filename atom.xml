<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>傲世孤尘</title>
  
  <subtitle>还生命以坦然，遗沧海以一笑</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.aoshiguchen.com/"/>
  <updated>2018-01-11T05:17:34.069Z</updated>
  <id>http://blog.aoshiguchen.com/</id>
  
  <author>
    <name>傲世孤尘</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c语言奇淫技巧之lambda表达式</title>
    <link href="http://blog.aoshiguchen.com/2018/01/11/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/c%E8%AF%AD%E8%A8%80%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7%E4%B9%8Blambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://blog.aoshiguchen.com/2018/01/11/编程语言/c/c语言奇淫技巧之lambda表达式/</id>
    <published>2018-01-10T16:00:00.000Z</published>
    <updated>2018-01-11T05:17:34.069Z</updated>
    
    <content type="html"><![CDATA[<h2 id="何为奇淫技巧"><a href="#何为奇淫技巧" class="headerlink" title="何为奇淫技巧?"></a>何为奇淫技巧?</h2><p>百科解释：指过于奇巧，让人着迷，却又无益的技艺与制品。</p><p>c语言奇淫技巧是指，利用c语言的一些细小的语法特性，来实现一些令人着迷的、眼花缭乱的、看似语言本身不支持的功能。比如：实现c语言封装、继承、多态、lambda表达式、动态包含等。在开发中巧妙运用这些技巧，会让你的程序组织起来更加合理。过于玩弄这些技巧则会令你舍本逐末、忽略了项目中其他更重要的事情。</p><p>研究奇淫技巧，是一个充满趣味的过程，也是不断深入语言的过程。通过理解这些奇淫技巧，你会发现你曾经理解的一些基本的语言概念其实并不是真的理解。</p><a id="more"></a><h2 id="c语言实现lambda表达式的原理"><a href="#c语言实现lambda表达式的原理" class="headerlink" title="c语言实现lambda表达式的原理"></a>c语言实现lambda表达式的原理</h2><p>我们通常用的c语言语法，是c语言标准规定的语法。然而不同的c编译器在实现标准语法的同时，可能会扩展一些其他的特定语法。这些语法一般都是用在底层的一些库、工具中，如果你经常阅读c语言库，一定能发现它们的踪影。<br>c语言实现lambda表达式，是基于gcc的一个扩展。而检查你当前的c编译器是否支持这个扩展，其实很简单。</p><p>运行下面的程序，输出1则证明你的编译器支持，如果报错则不支持。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = (&#123;<span class="number">1</span>;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="实现lambda表达式"><a href="#实现lambda表达式" class="headerlink" title="实现lambda表达式"></a>实现lambda表达式</h2><p>为了便于大家理解，这里采用递进的方式，渐进式修改代码，方便大家明白。</p><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">(&#123;</span><br><span class="line"><span class="keyword">char</span>* s = <span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,s);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的运行后输出hello，说明 ({});可以作为一个块级作用域，里面可以运行代码片段。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>令人惊异的是，这个块级作用域还能对外返回一个值。当然，返回的方式不是return，而是直接写返回值，并带上一个分号。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = (&#123;</span><br><span class="line"><span class="keyword">char</span>* s = <span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,s);</span><br><span class="line"><span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>既然这种方法可以返回一个值，那么我们返回一个函数呢？毕竟函数名就是函数的首地址，答案是肯定的。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> (&#123;</span><br><span class="line"><span class="keyword">void</span> hello()&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">hello;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="宏改写匿名函数"><a href="#宏改写匿名函数" class="headerlink" title="宏改写匿名函数"></a>宏改写匿名函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> $(rt,fb) (&#123; \</span></span><br><span class="line">rt <span class="keyword">this</span> fb;\</span><br><span class="line"><span class="keyword">this</span>;\</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">void</span>,()&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello\n"</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样看是不是有点眼熟呢，不过还是有些美中不足。我们希望这个匿名函数不仅仅只是自执行，还能保存到一个变量中。</p><h3 id="用函数指针类型接收匿名函数对象"><a href="#用函数指针类型接收匿名函数对象" class="headerlink" title="用函数指针类型接收匿名函数对象"></a>用函数指针类型接收匿名函数对象</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> $(rt,fb) (&#123; \</span></span><br><span class="line">rt <span class="keyword">this</span> fb;\</span><br><span class="line"><span class="keyword">this</span>;\</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为匿名函数没有返回值，没有参数，所以函数指针可以定义为：void (*hello)()</span></span><br><span class="line"><span class="keyword">void</span> (*hello)() = $(<span class="keyword">void</span>,()&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello\n"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">hello();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="宏改写函数指针定义"><a href="#宏改写函数指针定义" class="headerlink" title="宏改写函数指针定义"></a>宏改写函数指针定义</h3><p>上面虽然解决了保存匿名函数的问题，但是确带来的另一个问题，函数指针的定义比较冗长、复杂。因此，可以通过宏定义的方式改写。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> $(rt,fb) (&#123; \</span></span><br><span class="line">rt <span class="keyword">this</span> fb;\</span><br><span class="line"><span class="keyword">this</span>;\</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Type(t) typeof((&#123;t _t;_t;&#125;))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FType(rt,fp) typeof((&#123;rt (*_this)fp;_this;&#125;))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Consumer(t) FType(void,(t))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">Consumer() hello = $(<span class="keyword">void</span>,()&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello\n"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">hello();</span><br><span class="line"></span><br><span class="line">Consumer(<span class="keyword">int</span>) a = $(<span class="keyword">void</span>,(<span class="keyword">int</span> n)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"num is %d\n"</span>,n);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">a(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">Consumer(<span class="keyword">char</span>*) b = $(<span class="keyword">void</span>,(<span class="keyword">char</span>* name)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello %s\n"</span>,name);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">b(<span class="string">"zhangsan"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="lambda表达式库"><a href="#lambda表达式库" class="headerlink" title="lambda表达式库"></a>lambda表达式库</h2><p>到这里，我们就可以写一个lambda表达式的头文件了，用到lambda表达式的地方只需要包含这个头文件就可以了。</p><p>lambda.h<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _LAMBDA_H_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _LAMBDA_H_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Type(t) typeof((&#123;t _t;_t;&#125;))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FType(rt,fp) typeof((&#123;rt (*_this)fp;_this;&#125;))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lambda(rt,fb) (&#123; \</span></span><br><span class="line">rt <span class="keyword">this</span> fb;\</span><br><span class="line"><span class="keyword">this</span>;\</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> $ lambda</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Executor FType(void,())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Consumer(t) FType(void,(t))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BiConsumer(t1,t2) FType(void,(t1,t2))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TiConsumer(t1,t2,t3) FType(void,(t1,t2,t3))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Supplier(rt) FType(rt,())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Function(rt,t) FType(rt,(t))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BiFunction(rt,t1,t2) FType(rt,(t1,t2))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TiFunction(rt,t1,t2,t3) FType(rt,(t1,t2,t3))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UnaryOperator(t) Function(t,t)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BinaryOperator(t) BiFunction(t,t,t)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p>type.h<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _TYPE_H_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _TYPE_H_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lambda.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool short</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Int int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> String char*</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IntConsumer Consumer(int)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IntBiConsumer BiConsumer(int,int)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IntTiConsumer TiConsumer(int,int,int)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IntSupplier Supplier(int)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> StringSupplier Supplier(String)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IntFunction(rt) Function(rt,int)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ToIntFunction(t) Function(int,t)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IntBiFunction(rt) BiFunction(rt,int,int)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ToIntBiFunction(t1,t2) BiFunction(int,t1,t2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IntTiFunction(rt) TiFunction(rt,int,int,int)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ToIntTiFunction(t1,t2,t3) TiFunction(int,t1,t2,t3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IntUnaryOperator UnaryOperator(int)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IntBinaryOperator BinaryOperator(int)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Comparator(t) BiFunction(int,t,t)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Not(t) Function(BOOL,t)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> And(t) BiFunction(BOOL,t,t)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Or(t) BiFunction(BOOL,t,t)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Equal(t) BiFunction(BOOL,t,t)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Test(t) Function(BOOL,t)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Template(T,body) typeof((&#123; \</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">body</span> _<span class="title">TYPE</span>;</span> \ </span><br><span class="line">_TYPE _tmp; \</span><br><span class="line">_tmp; \</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BiTemplate(T1,T2,body) typeof((&#123; \</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">body</span> _<span class="title">TYPE</span>;</span> \ </span><br><span class="line">_TYPE _tmp; \</span><br><span class="line">_tmp; \</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TiTemplate(T1,T2,T3,body) typeof((&#123; \</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">body</span> _<span class="title">TYPE</span>;</span> \ </span><br><span class="line">_TYPE _tmp; \</span><br><span class="line">_tmp; \</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Data(T) Template(T,&#123; \</span></span><br><span class="line">T data; \</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>这里为了方便写了另一个头文件，如下：</p><p>util.h<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _UTIL_H_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _UTIL_H_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"type.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Block FType(void,())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Code(c) do&#123; \</span></span><br><span class="line">c \</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PrintString(s) printf(<span class="meta-string">"%s"</span>,s)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PrintStringLn(s) printf(<span class="meta-string">"%s\n"</span>,s)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PrintInt(d) printf(<span class="meta-string">"%d"</span>,d)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PrintIntLn(d) printf(<span class="meta-string">"%d\n"</span>,d)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PrintBool(b) Code(\</span></span><br><span class="line"><span class="keyword">if</span>(b == TRUE)&#123;\</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"true"</span>);\</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;\</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"false"</span>);\</span><br><span class="line">&#125;\</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PrintBoolLn(b) Code(\</span></span><br><span class="line"><span class="keyword">if</span>(b == TRUE)&#123;\</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"true\n"</span>);\</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;\</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"false\n"</span>);\</span><br><span class="line">&#125;\</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Malloc(t,n) (t)malloc(sizeof(t) * n) </span></span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">Concat</span><span class="params">(String s1,String s2)</span></span>&#123;</span><br><span class="line">Int len = <span class="built_in">strlen</span>(s1) + <span class="built_in">strlen</span>(s2) + <span class="number">1</span>;</span><br><span class="line">String res = Malloc(String,len);</span><br><span class="line"></span><br><span class="line"><span class="built_in">sprintf</span>(res,<span class="string">"%s%s"</span>,s1,s2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p>下面是对于lambda表达式库的一些测试程序</p><h3 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lambda.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"util.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"type.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">Block hello1 = $(<span class="keyword">void</span>,()&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello\n"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">hello1();</span><br><span class="line"></span><br><span class="line">Consumer(<span class="keyword">char</span>*) hello2 = $(<span class="keyword">void</span>,(<span class="keyword">char</span> *name)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello %s\n"</span>,name);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">hello2(<span class="string">"zhangsan"</span>);</span><br><span class="line"></span><br><span class="line">BiConsumer(<span class="keyword">char</span>*,<span class="keyword">int</span>) hello3 = $(<span class="keyword">void</span>,(<span class="keyword">char</span> *name,<span class="keyword">int</span> age)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello %s %d\n"</span>,name,age);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">hello3(<span class="string">"lisi"</span>,<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">Function(<span class="keyword">int</span>,<span class="keyword">int</span>) fact = $(<span class="keyword">int</span>,(<span class="keyword">int</span> n)&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">res *= i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,fact(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">BiFunction(<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>) sum = $(<span class="keyword">int</span>,(<span class="keyword">int</span> a,<span class="keyword">int</span> b)&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum(<span class="number">4</span>,<span class="number">7</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line">hello zhangsan</span><br><span class="line">hello lisi 22</span><br><span class="line">120</span><br><span class="line">11</span><br></pre></td></tr></table></figure></p><h3 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lambda.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"util.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"type.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">Code(</span><br><span class="line"></span><br><span class="line">StringSupplier helloSupplier = $(String,()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello "</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Consumer(String) out = $(<span class="keyword">void</span>,(String s)&#123;</span><br><span class="line">PrintStringLn(s);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">String name = <span class="string">"zhangsan"</span>;</span><br><span class="line">out(Concat(helloSupplier(),name));</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello zhangsan</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;何为奇淫技巧&quot;&gt;&lt;a href=&quot;#何为奇淫技巧&quot; class=&quot;headerlink&quot; title=&quot;何为奇淫技巧?&quot;&gt;&lt;/a&gt;何为奇淫技巧?&lt;/h2&gt;&lt;p&gt;百科解释：指过于奇巧，让人着迷，却又无益的技艺与制品。&lt;/p&gt;
&lt;p&gt;c语言奇淫技巧是指，利用c语言的一些细小的语法特性，来实现一些令人着迷的、眼花缭乱的、看似语言本身不支持的功能。比如：实现c语言封装、继承、多态、lambda表达式、动态包含等。在开发中巧妙运用这些技巧，会让你的程序组织起来更加合理。过于玩弄这些技巧则会令你舍本逐末、忽略了项目中其他更重要的事情。&lt;/p&gt;
&lt;p&gt;研究奇淫技巧，是一个充满趣味的过程，也是不断深入语言的过程。通过理解这些奇淫技巧，你会发现你曾经理解的一些基本的语言概念其实并不是真的理解。&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://blog.aoshiguchen.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="c" scheme="http://blog.aoshiguchen.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/"/>
    
    
      <category term="编程语言" scheme="http://blog.aoshiguchen.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="c" scheme="http://blog.aoshiguchen.com/tags/c/"/>
    
      <category term="奇淫技巧" scheme="http://blog.aoshiguchen.com/tags/%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>用c++实现遗传算法</title>
    <link href="http://blog.aoshiguchen.com/2018/01/10/%E7%AE%97%E6%B3%95/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/0.0.1/c++/%E7%94%A8c++%E5%AE%9E%E7%8E%B0%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    <id>http://blog.aoshiguchen.com/2018/01/10/算法/遗传算法/0.0.1/c++/用c++实现遗传算法/</id>
    <published>2018-01-09T16:00:00.000Z</published>
    <updated>2018-01-10T07:16:52.307Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最优解问题，可以想象成生物的进化：生物进化需要一个初始的种群，即对应程序中需要给出一组问题的初始解，初始解的产生应尽可能简单，原则上问题的求解过程不应该依赖于初始解的设定，而应该依赖于进化。生物进行基因突变、基因重组，是生物多样化的基础，因此程序中为了避免陷入局部最优解，也需要引入类似的操作，下面的程序引入了基因突变。大自然对种群进行自然选择，保证了优良个体有更多的机会遗传到下一代，从而实现进化。所以程序中需要大自然这一角色对控制种群的进化方向。</p><p>既然有基因，程序中不可避免就涉及到基因的编码与解码。按照更接近于大自然的方式，可以使用二进制编码，更容易实现基因突变和基因重组，但需要不断进行编码解码，运算效率稍低。这里，我采用的是浮点数编码，写的第一个版本，为了简单，这里只引入了基因突变。相当于无性繁殖，比有性繁殖进化慢，故可以加长进化代数，以求更加接近最优解。</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>以下是遗传算法的c++实现，大自然（Nature）、个体（Individual）、遗传算法引擎（MyGeneticAlgorithm）是本算法的核心。</p><h3 id="GeneticAlgorithmEngine-h"><a href="#GeneticAlgorithmEngine-h" class="headerlink" title="GeneticAlgorithmEngine.h"></a>GeneticAlgorithmEngine.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********************************************************/</span></span><br><span class="line"><span class="comment">/*遗传算法引擎                                          */</span></span><br><span class="line"><span class="comment">/********************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _YW_MY_GENETIC_ALGORITHM_GENETIC_ALGORITHM_ENGINE_H_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _YW_MY_GENETIC_ALGORITHM_GENETIC_ALGORITHM_ENGINE_H_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Individual.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Math.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Nature.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Log.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> YW&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> MyGeneticAlgorithm&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************************************/</span></span><br><span class="line"><span class="comment">/*遗传算法引擎                                          */</span></span><br><span class="line"><span class="comment">/*负责与客户端进行交互，协调大自然、个体的正常运转      */</span></span><br><span class="line"><span class="comment">/********************************************************/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeneticAlgorithmEngine</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：GeneticAlgorithmEngine</span></span><br><span class="line"><span class="comment">*功能概要：构造函数</span></span><br><span class="line"><span class="comment">*param@1popSize:种群大小</span></span><br><span class="line"><span class="comment">*param@2mutationRate:基因突变的概率</span></span><br><span class="line"><span class="comment">*param@3maxPerturbation:最大的变异步长</span></span><br><span class="line"><span class="comment">*param@4generationCount:种群繁衍的代数</span></span><br><span class="line"><span class="comment">*param@5leftInterval:左区间</span></span><br><span class="line"><span class="comment">*param@6rightInterval:右区间</span></span><br><span class="line"><span class="comment">*param@7assessmentFunction:个体适应度评估函数</span></span><br><span class="line"><span class="comment">*返回值：无</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">GeneticAlgorithmEngine(<span class="keyword">int</span> popSize,<span class="keyword">double</span> mutationRate,<span class="keyword">int</span> generationCount,<span class="keyword">double</span> leftInterval,<span class="keyword">double</span> rightInterval,ASSESSMENT_FUNCTION assessmentFunction)&#123;</span><br><span class="line">LOG(<span class="string">"GeneticAlgorithmEngine Constructor Invoketion!\n"</span>);</span><br><span class="line"><span class="keyword">this</span>-&gt;nature = <span class="keyword">new</span> Nature(popSize,mutationRate,(rightInterval-leftInterval)/<span class="number">4000</span>,leftInterval,rightInterval,assessmentFunction);</span><br><span class="line"><span class="keyword">this</span>-&gt;generationCount = generationCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：OnStart</span></span><br><span class="line"><span class="comment">*功能概要：让种群开始进化</span></span><br><span class="line"><span class="comment">*params无</span></span><br><span class="line"><span class="comment">*返回值：无</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnStart</span><span class="params">()</span></span>&#123;</span><br><span class="line">LOG(<span class="string">"GeneticAlgorithmEngine OnStart Method Invoketion!\n"</span>);</span><br><span class="line">LOG(<span class="string">"-------------------------------------------------\n"</span>);</span><br><span class="line">LOG(<span class="string">"第0代种群：\n"</span>);</span><br><span class="line">LOG(<span class="string">"适应度总和：%.10lf\n"</span>,nature-&gt;totalFitness);</span><br><span class="line">LOG(<span class="string">"最优适应度：%.10lf\n"</span>,nature-&gt;bestFitness);</span><br><span class="line">LOG(<span class="string">"平均适应度：%.10lf\n"</span>,nature-&gt;averageFitness);</span><br><span class="line">LOG(<span class="string">"最差适应度：%.10lf\n"</span>,nature-&gt;worstFitness);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;generationCount;i++)&#123;</span><br><span class="line">nature-&gt;Reproduction();</span><br><span class="line">LOG(<span class="string">"-------------------------------------------------\n"</span>);</span><br><span class="line">LOG(<span class="string">"第%d代种群：\n"</span>,i+<span class="number">1</span>);</span><br><span class="line">LOG(<span class="string">"适应度总和：%.10lf\n"</span>,nature-&gt;totalFitness);</span><br><span class="line">LOG(<span class="string">"最优适应度：%.10lf\n"</span>,nature-&gt;bestFitness);</span><br><span class="line">LOG(<span class="string">"平均适应度：%.10lf\n"</span>,nature-&gt;averageFitness);</span><br><span class="line">LOG(<span class="string">"最差适应度：%.10lf\n"</span>,nature-&gt;worstFitness);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LOG(<span class="string">"最优个体首次出现于于第%d代\n"</span>,nature-&gt;first);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：GetBeseFitness</span></span><br><span class="line"><span class="comment">*功能概要：获取环境中最优个体的适应度</span></span><br><span class="line"><span class="comment">*params无</span></span><br><span class="line"><span class="comment">*返回值：最优个体的适应度</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">GetBeseFitness</span><span class="params">()</span></span>&#123;</span><br><span class="line">LOG(<span class="string">"GeneticAlgorithmEngine GetBeseFitness Method Invoketion!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> nature-&gt;bestIndividual.fitness;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：GetBestChromosome</span></span><br><span class="line"><span class="comment">*功能概要：获取环境中最优个体的基因型</span></span><br><span class="line"><span class="comment">*params无</span></span><br><span class="line"><span class="comment">*返回值：最优个体的基因型</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">GetBestChromosome</span><span class="params">()</span></span>&#123;</span><br><span class="line">LOG(<span class="string">"GeneticAlgorithmEngine GetBestChromosome Method Invoketion!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> nature-&gt;bestIndividual.vecChromosome[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Nature *nature;<span class="comment">//大自然、环境</span></span><br><span class="line"><span class="keyword">int</span> generationCount;<span class="comment">//种群繁衍的代数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Individual-h"><a href="#Individual-h" class="headerlink" title="Individual.h"></a>Individual.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********************************************************/</span></span><br><span class="line"><span class="comment">/*个体                                                  */</span></span><br><span class="line"><span class="comment">/********************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _YW_MY_GENETIC_ALGORITHM_INDIVIDUAL_H_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _YW_MY_GENETIC_ALGORITHM_INDIVIDUAL_H_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> YW&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> MyGeneticAlgorithm&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="comment">/*个体                                                                    */</span></span><br><span class="line"><span class="comment">/*将求解过程模拟成物种的进化、最终经过自然选择存活下来的个体便为"最优解"    */</span></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Individual</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Nature</span>;</span></span><br><span class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Reproduction</span>;</span></span><br><span class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneticAlgorithmEngine</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：Individual</span></span><br><span class="line"><span class="comment">*功能概要：复制构造函数</span></span><br><span class="line"><span class="comment">*param@1individual:复制的对象</span></span><br><span class="line"><span class="comment">*返回值：无</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">Individual(<span class="keyword">const</span> Individual &amp;individual)&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;fitness = individual.fitness;</span><br><span class="line"><span class="keyword">this</span>-&gt;vecChromosome = individual.vecChromosome;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：Individual</span></span><br><span class="line"><span class="comment">*功能概要：默认构造函数</span></span><br><span class="line"><span class="comment">*param@1无</span></span><br><span class="line"><span class="comment">*返回值：无</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">Individual():fitness(<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：Individual</span></span><br><span class="line"><span class="comment">*功能概要：构造函数</span></span><br><span class="line"><span class="comment">*param@1vec基因型</span></span><br><span class="line"><span class="comment">*param@1value适应度</span></span><br><span class="line"><span class="comment">*返回值：无</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">Individual(<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; vec,<span class="keyword">double</span> value = <span class="number">0</span>):vecChromosome(vec),fitness(value)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：&lt;</span></span><br><span class="line"><span class="comment">*功能概要：个体之间优劣性的比较，依据适应度</span></span><br><span class="line"><span class="comment">*param@1individual参与比较的个体</span></span><br><span class="line"><span class="comment">*返回值：bool比较结果</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(Individual &amp;individual)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;fitness &lt; individual.fitness;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; vecChromosome;<span class="comment">//染色体序列,采用浮点数对基因进行编码</span></span><br><span class="line"><span class="keyword">double</span> fitness;<span class="comment">//个体适应度</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Nature-h"><a href="#Nature-h" class="headerlink" title="Nature.h"></a>Nature.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********************************************************/</span></span><br><span class="line"><span class="comment">/*大自然、环境                                          */</span></span><br><span class="line"><span class="comment">/********************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _YW_MY_GENETIC_ALGORITHM_NATURE_H_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _YW_MY_GENETIC_ALGORITHM_NATURE_H_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Math.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Individual.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Random.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> YW&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> MyGeneticAlgorithm&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> YW::MyLiBrary::Math;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">double</span> <span class="params">(*ASSESSMENT_FUNCTION)</span><span class="params">(<span class="keyword">double</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="comment">/*大自然                                                                  */</span></span><br><span class="line"><span class="comment">/*引导种群的进化方向                                                      */</span></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nature</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneticAlgorithmEngine</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：Nature</span></span><br><span class="line"><span class="comment">*功能概要：构造函数</span></span><br><span class="line"><span class="comment">*param@1popSize:种群大小</span></span><br><span class="line"><span class="comment">*param@2mutationRate:基因突变的概率</span></span><br><span class="line"><span class="comment">*param@3maxPerturbation:最大的变异步长</span></span><br><span class="line"><span class="comment">*param@4leftInterval:左区间</span></span><br><span class="line"><span class="comment">*param@5rightInterval:右区间</span></span><br><span class="line"><span class="comment">*param@6assessmentFunction:个体适应度评估函数</span></span><br><span class="line"><span class="comment">*返回值：无</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">Nature(<span class="keyword">int</span> popSize,<span class="keyword">double</span> mutationRate,<span class="keyword">double</span> maxPerturbation,<span class="keyword">double</span> leftInterval,<span class="keyword">double</span> rightInterval,ASSESSMENT_FUNCTION assessmentFunction)&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;popSize = popSize;</span><br><span class="line"><span class="keyword">this</span>-&gt;mutationRate = mutationRate;</span><br><span class="line"><span class="keyword">this</span>-&gt;maxPerturbation = maxPerturbation;</span><br><span class="line"><span class="keyword">this</span>-&gt;leftInterval = leftInterval;</span><br><span class="line"><span class="keyword">this</span>-&gt;rightInterval = rightInterval;</span><br><span class="line"><span class="keyword">this</span>-&gt;assessmentFunction = assessmentFunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;totalFitness = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;bestFitness  = DOUBLE_MIN_VALUE;</span><br><span class="line"><span class="keyword">this</span>-&gt;averageFitness = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;worstFitness = DOUBLE_MAX_VALUE;</span><br><span class="line"><span class="keyword">this</span>-&gt;generation = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;popSize;i++)&#123;</span><br><span class="line">Individual individual;</span><br><span class="line">individual.vecChromosome.push_back(random.GetRandom(leftInterval,rightInterval));</span><br><span class="line">individual.fitness = assessmentFunction(individual.vecChromosome[<span class="number">0</span>]);</span><br><span class="line">population.push_back(individual);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CalculateFitness();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：CalculateFitness</span></span><br><span class="line"><span class="comment">*功能概要： 统计整个种群的进化数据</span></span><br><span class="line"><span class="comment">*params无</span></span><br><span class="line"><span class="comment">*返回值：无</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CalculateFitness</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">sort(population.begin(),population.end());</span><br><span class="line"><span class="keyword">this</span>-&gt;totalFitness = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;averageFitness = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;worstFitness = DOUBLE_MAX_VALUE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;popSize;i++)&#123;</span><br><span class="line">totalFitness += population[i].fitness;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(population[i].fitness&gt;bestFitness)&#123;</span><br><span class="line">bestFitness = population[i].fitness;</span><br><span class="line">bestIndividual = population[i];</span><br><span class="line">first = generation;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(population[i].fitness&lt;worstFitness)&#123;</span><br><span class="line">worstFitness = population[i].fitness;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">averageFitness = totalFitness / popSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：GetChromoRoulette</span></span><br><span class="line"><span class="comment">*功能概要： 轮盘赌选择</span></span><br><span class="line"><span class="comment">*params无</span></span><br><span class="line"><span class="comment">*返回值：无</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function">Individual <span class="title">GetChromoRoulette</span><span class="params">(<span class="built_in">vector</span>&lt;Individual&gt;&amp;pop)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">Individual individual;</span><br><span class="line"><span class="keyword">double</span> temp = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">double</span> slice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(worstFitness&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">slice = random.GetRandom(<span class="number">0</span>,<span class="number">1</span>)*totalFitness;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;popSize;i++)&#123;</span><br><span class="line">temp += pop[i].fitness;</span><br><span class="line"><span class="keyword">if</span>(temp&gt;=slice)&#123;</span><br><span class="line">individual = pop[i];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">double</span> pseudoTotalFitness = totalFitness + (<span class="number">-1</span>)*popSize*worstFitness;</span><br><span class="line">slice = random.GetRandom(<span class="number">0</span>,<span class="number">1</span>)*pseudoTotalFitness;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;popSize;i++)&#123;</span><br><span class="line">temp += pop[i].fitness+(<span class="number">-1</span>)*worstFitness;</span><br><span class="line"><span class="keyword">if</span>(temp&gt;=slice)&#123;</span><br><span class="line">individual = pop[i];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//避免因浮点数的精度误差造成错误</span></span><br><span class="line"><span class="keyword">if</span>(individual.fitness == <span class="number">0</span>)&#123;</span><br><span class="line">individual = pop[popSize<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> individual;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：Mutate</span></span><br><span class="line"><span class="comment">*功能概要： 基因突变</span></span><br><span class="line"><span class="comment">*params无</span></span><br><span class="line"><span class="comment">*返回值：无</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mutate</span><span class="params">(Individual &amp;individual)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(random.GetRandom(<span class="number">0</span>,<span class="number">1</span>)&lt;= mutationRate)&#123;</span><br><span class="line">individual.vecChromosome[<span class="number">0</span>] += (random.GetRandom(<span class="number">0</span>,<span class="number">1</span>)<span class="number">-0.5</span>)*maxPerturbation;</span><br><span class="line"><span class="keyword">if</span>(individual.vecChromosome[<span class="number">0</span>]&gt;rightInterval)&#123;</span><br><span class="line">individual.vecChromosome[<span class="number">0</span>] = rightInterval;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(individual.vecChromosome[<span class="number">0</span>]&lt;leftInterval)&#123;</span><br><span class="line">individual.vecChromosome[<span class="number">0</span>] = leftInterval;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：Reproduction</span></span><br><span class="line"><span class="comment">*功能概要： 繁殖、产生下一代种群</span></span><br><span class="line"><span class="comment">*params无</span></span><br><span class="line"><span class="comment">*返回值：无</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reproduction</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Individual&gt; temp = population;</span><br><span class="line">population.clear();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(population.size()&lt;popSize)&#123;</span><br><span class="line">Individual individual = GetChromoRoulette(temp);</span><br><span class="line">Mutate(individual);</span><br><span class="line">individual.fitness = assessmentFunction(individual.vecChromosome[<span class="number">0</span>]);</span><br><span class="line">population.push_back(individual);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;popSize;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(population[i].fitness&gt;=bestIndividual.fitness)&#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">population[(<span class="keyword">int</span>)random.GetRandom(<span class="number">0</span>,popSize<span class="number">-1</span>)] = bestIndividual;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">generation++;</span><br><span class="line">CalculateFitness();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">vector</span>&lt;Individual&gt;population;<span class="comment">//种群</span></span><br><span class="line"><span class="keyword">int</span> popSize;<span class="comment">//种群大小(人口数量)</span></span><br><span class="line">ASSESSMENT_FUNCTION assessmentFunction;<span class="comment">//评估函数</span></span><br><span class="line"><span class="keyword">double</span> totalFitness;<span class="comment">//种群的适应度总和</span></span><br><span class="line"><span class="keyword">double</span> bestFitness;<span class="comment">//种群中最优个体的适应度</span></span><br><span class="line"><span class="keyword">double</span> averageFitness;<span class="comment">//种群的平均适应度</span></span><br><span class="line"><span class="keyword">double</span> worstFitness;<span class="comment">//种群的最低适应度</span></span><br><span class="line">Individual bestIndividual;<span class="comment">//适应度最高的个体</span></span><br><span class="line"><span class="keyword">double</span> mutationRate;<span class="comment">//基因突变的概率</span></span><br><span class="line"><span class="keyword">int</span> generation;<span class="comment">//当前种群的代数</span></span><br><span class="line"><span class="keyword">double</span> maxPerturbation;<span class="comment">//最大变异步长</span></span><br><span class="line"><span class="keyword">double</span> leftInterval;<span class="comment">//左区间</span></span><br><span class="line"><span class="keyword">double</span> rightInterval;<span class="comment">//右区间</span></span><br><span class="line"><span class="keyword">int</span> first;<span class="comment">//最优个体首次出现的代数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Log-h"><a href="#Log-h" class="headerlink" title="Log.h"></a>Log.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _YW_MY_LOG_H_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _YW_MY_LOG_H_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG printf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Math-h"><a href="#Math-h" class="headerlink" title="Math.h"></a>Math.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********************************************************/</span></span><br><span class="line"><span class="comment">/*数学函数、常量                                        */</span></span><br><span class="line"><span class="comment">/********************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _YW_MY_LIBRARY_MATH_H_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _YW_MY_LIBRARY_MATH_H_H_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> YW&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> MyLiBrary&#123;</span><br><span class="line"><span class="keyword">namespace</span> Math&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265358979</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DOUBLE_MAX_VALUE 1.7976931348623158e+308</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DOUBLE_MIN_VALUE (-DOUBLE_MAX_VALUE+1)</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Random-h"><a href="#Random-h" class="headerlink" title="Random.h"></a>Random.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********************************************************/</span></span><br><span class="line"><span class="comment">/*随机数                                                */</span></span><br><span class="line"><span class="comment">/********************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _YW_MY_LIBRARY_MATH_RANDOM_H_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _YW_MY_LIBRARY_MATH_RANDOM_H_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> YW&#123; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">namespace</span> MyLiBrary&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">namespace</span> Math&#123;</span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">Random</span>&#123;</span></span><br><span class="line">                <span class="keyword">public</span>:</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                *函数名：Random</span></span><br><span class="line"><span class="comment">                *功能概要：构造函数</span></span><br><span class="line"><span class="comment">                *params     无</span></span><br><span class="line"><span class="comment">                *返回值：无</span></span><br><span class="line"><span class="comment">                **/</span></span><br><span class="line">                Random();</span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                *函数名：GetRandom</span></span><br><span class="line"><span class="comment">                *功能概要：产生一个随机数</span></span><br><span class="line"><span class="comment">                *params@1    start左区间</span></span><br><span class="line"><span class="comment">                *params@2    end右区间</span></span><br><span class="line"><span class="comment">                *返回值： 产生的随机数</span></span><br><span class="line"><span class="comment">                **/</span></span><br><span class="line">                <span class="function"><span class="keyword">double</span> <span class="title">GetRandom</span><span class="params">(<span class="keyword">double</span> start,<span class="keyword">double</span> end)</span></span>;</span><br><span class="line"></span><br><span class="line">            &#125;random;</span><br><span class="line"></span><br><span class="line">            Random::Random()&#123;</span><br><span class="line">                srand(<span class="keyword">unsigned</span>(time(<span class="number">0</span>)));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">double</span> Random::GetRandom(<span class="keyword">double</span> start,<span class="keyword">double</span> end)&#123;</span><br><span class="line">                <span class="keyword">return</span> start+(end-start)*rand()/RAND_MAX;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********************************************************/</span></span><br><span class="line"><span class="comment">/*遗传算法练习      傲世孤尘        2014-10-12          */</span></span><br><span class="line"><span class="comment">/********************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"GeneticAlgorithmEngine.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Individual.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Math.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> YW::MyGeneticAlgorithm;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> YW::MyLiBrary::Math;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：func</span></span><br><span class="line"><span class="comment">*功能概要： 评估个体的适应度 </span></span><br><span class="line"><span class="comment">*param@1value基因型</span></span><br><span class="line"><span class="comment">*返回值：double适应度</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">func</span><span class="params">(<span class="keyword">double</span> value)</span></span>&#123;</span><br><span class="line">    <span class="comment">//return value*sin(10*PI*value)+2.0;</span></span><br><span class="line">    <span class="comment">//return 2*value+1;</span></span><br><span class="line">    <span class="comment">//return (-2)*value-1;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sin</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：main</span></span><br><span class="line"><span class="comment">*功能概要： 程序入口</span></span><br><span class="line"><span class="comment">*params无</span></span><br><span class="line"><span class="comment">*返回值：int进程结束代码</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *种群大小：500</span></span><br><span class="line"><span class="comment">    *基因突变的概率:0.8</span></span><br><span class="line"><span class="comment">    *繁衍代数：300</span></span><br><span class="line"><span class="comment">    *左区间：0</span></span><br><span class="line"><span class="comment">    *右区间：4</span></span><br><span class="line"><span class="comment">    *个体适应度评估函数：func</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="function">GeneticAlgorithmEngine <span class="title">engine</span><span class="params">(<span class="number">500</span>,<span class="number">0.8</span>,<span class="number">300</span>,<span class="number">0</span>,<span class="number">4</span>,func)</span></span>;</span><br><span class="line">    engine.OnStart();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lf\n"</span>,engine.GetBeseFitness());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lf\n"</span>,engine.GetBestChromosome());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lf\n"</span>,func(engine.GetBestChromosome()));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********************************************************/</span></span><br><span class="line"><span class="comment">/*遗传算法练习      傲世孤尘        2017-08-01          */</span></span><br><span class="line"><span class="comment">/********************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define DEBUG</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"GeneticAlgorithmEngine.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Individual.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Math.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> YW::MyGeneticAlgorithm;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> YW::MyLiBrary::Math;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：func</span></span><br><span class="line"><span class="comment">*功能概要： 评估个体的适应度</span></span><br><span class="line"><span class="comment">*param@1value基因型 </span></span><br><span class="line"><span class="comment">*返回值：double适应度</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">func</span><span class="params">(<span class="keyword">double</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value*<span class="built_in">sin</span>(<span class="number">15</span>*PI*value)+<span class="number">2.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：main</span></span><br><span class="line"><span class="comment">*功能概要： 程序入口</span></span><br><span class="line"><span class="comment">*params无</span></span><br><span class="line"><span class="comment">*返回值：int进程结束代码</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *种群大小：500</span></span><br><span class="line"><span class="comment">    *基因突变的概率:0.8</span></span><br><span class="line"><span class="comment">    *繁衍代数：300</span></span><br><span class="line"><span class="comment">    *左区间：0</span></span><br><span class="line"><span class="comment">    *右区间：4</span></span><br><span class="line"><span class="comment">    *个体适应度评估函数：func</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="function">GeneticAlgorithmEngine <span class="title">engine</span><span class="params">(<span class="number">1000</span>,<span class="number">0.8</span>,<span class="number">600</span>,<span class="number">0</span>,<span class="number">200</span>,func)</span></span>;</span><br><span class="line">    engine.OnStart();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"最优个体适应度:%lf\n"</span>,engine.GetBeseFitness());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"最优个体基因:%lf\n"</span>,engine.GetBestChromosome());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"最优解:%lf\n"</span>,func(engine.GetBestChromosome()));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;最优解问题，可以想象成生物的进化：生物进化需要一个初始的种群，即对应程序中需要给出一组问题的初始解，初始解的产生应尽可能简单，原则上问题的求解过程不应该依赖于初始解的设定，而应该依赖于进化。生物进行基因突变、基因重组，是生物多样化的基础，因此程序中为了避免陷入局部最优解，也需要引入类似的操作，下面的程序引入了基因突变。大自然对种群进行自然选择，保证了优良个体有更多的机会遗传到下一代，从而实现进化。所以程序中需要大自然这一角色对控制种群的进化方向。&lt;/p&gt;
&lt;p&gt;既然有基因，程序中不可避免就涉及到基因的编码与解码。按照更接近于大自然的方式，可以使用二进制编码，更容易实现基因突变和基因重组，但需要不断进行编码解码，运算效率稍低。这里，我采用的是浮点数编码，写的第一个版本，为了简单，这里只引入了基因突变。相当于无性繁殖，比有性繁殖进化慢，故可以加长进化代数，以求更加接近最优解。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://blog.aoshiguchen.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="遗传算法" scheme="http://blog.aoshiguchen.com/categories/%E7%AE%97%E6%B3%95/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://blog.aoshiguchen.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="遗传算法" scheme="http://blog.aoshiguchen.com/tags/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    
      <category term="c++" scheme="http://blog.aoshiguchen.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>用node实现遗传算法</title>
    <link href="http://blog.aoshiguchen.com/2018/01/10/%E7%AE%97%E6%B3%95/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/0.0.1/node/%E7%94%A8node%E5%AE%9E%E7%8E%B0%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    <id>http://blog.aoshiguchen.com/2018/01/10/算法/遗传算法/0.0.1/node/用node实现遗传算法/</id>
    <published>2018-01-09T16:00:00.000Z</published>
    <updated>2018-01-10T08:03:17.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最优解问题，可以想象成生物的进化：生物进化需要一个初始的种群，即对应程序中需要给出一组问题的初始解，初始解的产生应尽可能简单，原则上问题的求解过程不应该依赖于初始解的设定，而应该依赖于进化。生物进行基因突变、基因重组，是生物多样化的基础，因此程序中为了避免陷入局部最优解，也需要引入类似的操作，下面的程序引入了基因突变。大自然对种群进行自然选择，保证了优良个体有更多的机会遗传到下一代，从而实现进化。所以程序中需要大自然这一角色对控制种群的进化方向。</p><p>既然有基因，程序中不可避免就涉及到基因的编码与解码。按照更接近于大自然的方式，可以使用二进制编码，更容易实现基因突变和基因重组，但需要不断进行编码解码，运算效率稍低。这里，我采用的是浮点数编码，写的第一个版本，为了简单，这里只引入了基因突变。相当于无性繁殖，比有性繁殖进化慢，故可以加长进化代数，以求更加接近最优解。</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>以下是遗传算法的node实现，大自然（Nature）、个体（Individual）、遗传算法引擎（MyGeneticAlgorithm）是本算法的核心。</p><p><a href="https://github.com/aoshiguchen/ai" target="_blank" rel="noopener">asgc-ai</a>是傲世孤尘开源的一款基于node的人工智能算法库，本遗传算法集成于其中，本算法调用了一些asgc-ai中的公共方法，下面只给出遗传算法的核心实现，因此要获取完整的代码请<a href="https://github.com/aoshiguchen/ai" target="_blank" rel="noopener">点击这里</a></p><h3 id="engine-js"><a href="#engine-js" class="headerlink" title="engine.js"></a>engine.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> log = <span class="built_in">require</span>(<span class="string">'../../common/log'</span>);</span><br><span class="line"><span class="keyword">var</span> Nature = <span class="built_in">require</span>(<span class="string">'./nature'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************************************/</span></span><br><span class="line"><span class="comment">/*遗传算法引擎                                          */</span></span><br><span class="line"><span class="comment">/*负责与客户端进行交互，协调大自然、个体的正常运转      */</span></span><br><span class="line"><span class="comment">/********************************************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：Engine</span></span><br><span class="line"><span class="comment">*功能概要：构造函数</span></span><br><span class="line"><span class="comment">*param@1popSize:种群大小</span></span><br><span class="line"><span class="comment">*param@2mutationRate:基因突变的概率</span></span><br><span class="line"><span class="comment">*param@3maxPerturbation:最大的变异步长</span></span><br><span class="line"><span class="comment">*param@4generationCount:种群繁衍的代数</span></span><br><span class="line"><span class="comment">*param@5leftInterval:左区间</span></span><br><span class="line"><span class="comment">*param@6rightInterval:右区间</span></span><br><span class="line"><span class="comment">*param@7assessmentFunction:个体适应度评估函数</span></span><br><span class="line"><span class="comment">*返回值：无</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Engine</span>(<span class="params">popSize,mutationRate,generationCount,leftInterval,rightInterval,assessmentFunction</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Engine))&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'调用方式有误!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.out(<span class="string">'Engine Constructor Invoketion!'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//大自然</span></span><br><span class="line"><span class="keyword">this</span>.nature = <span class="keyword">new</span> Nature(popSize,mutationRate,(rightInterval-leftInterval)/<span class="number">4000</span>,leftInterval,rightInterval,assessmentFunction);</span><br><span class="line"><span class="comment">//种群进化代数</span></span><br><span class="line"><span class="keyword">this</span>.generationCount = generationCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：OnStart</span></span><br><span class="line"><span class="comment">*功能概要：让种群开始进化</span></span><br><span class="line"><span class="comment">*params无</span></span><br><span class="line"><span class="comment">*返回值：无</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">Engine.prototype.OnStart = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">log.out(<span class="string">"Engine OnStart Method Invoketion!\n"</span>);</span><br><span class="line">log.out(<span class="string">"-------------------------------------------------\n"</span>);</span><br><span class="line">log.out(<span class="string">"第0代种群：\n"</span>);</span><br><span class="line">log.out(<span class="string">"适应度总和：%f\n"</span>,<span class="keyword">this</span>.nature.totalFitness);</span><br><span class="line">log.out(<span class="string">"最优适应度：%f\n"</span>,<span class="keyword">this</span>.nature.bestFitness);</span><br><span class="line">log.out(<span class="string">"平均适应度：%f\n"</span>,<span class="keyword">this</span>.nature.averageFitness);</span><br><span class="line">log.out(<span class="string">"最差适应度：%f\n"</span>,<span class="keyword">this</span>.nature.worstFitness);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="keyword">this</span>.generationCount;i++)&#123;</span><br><span class="line"><span class="keyword">this</span>.nature.Reproduction();</span><br><span class="line">log.out(<span class="string">"-------------------------------------------------\n"</span>);</span><br><span class="line">log.out(<span class="string">"第%d代种群：\n"</span>,i+<span class="number">1</span>);</span><br><span class="line">log.out(<span class="string">"适应度总和：%f\n"</span>,<span class="keyword">this</span>.nature.totalFitness);</span><br><span class="line">log.out(<span class="string">"最优适应度：%f\n"</span>,<span class="keyword">this</span>.nature.bestFitness);</span><br><span class="line">log.out(<span class="string">"平均适应度：%f\n"</span>,<span class="keyword">this</span>.nature.averageFitness);</span><br><span class="line">log.out(<span class="string">"最差适应度：%f\n"</span>,<span class="keyword">this</span>.nature.worstFitness);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.out(<span class="string">"最优个体首次出现于于第%d代\n"</span>,<span class="keyword">this</span>.nature.first);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：GetBeseFitness</span></span><br><span class="line"><span class="comment">*功能概要：获取环境中最优个体的适应度</span></span><br><span class="line"><span class="comment">*params无</span></span><br><span class="line"><span class="comment">*返回值：最优个体的适应度</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">Engine.prototype.GetBeseFitness = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.nature.bestIndividual.fitness;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：GetBestChromosome</span></span><br><span class="line"><span class="comment">*功能概要：获取环境中最优个体的基因型</span></span><br><span class="line"><span class="comment">*params无</span></span><br><span class="line"><span class="comment">*返回值：最优个体的基因型</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">Engine.prototype.GetBestChromosome = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.nature.bestIndividual.vecChromosome[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Engine;</span><br></pre></td></tr></table></figure><h3 id="nature-js"><a href="#nature-js" class="headerlink" title="nature.js"></a>nature.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> log = <span class="built_in">require</span>(<span class="string">'../../common/log'</span>);</span><br><span class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">'../../common/math'</span>);</span><br><span class="line"><span class="keyword">var</span> Individual = <span class="built_in">require</span>(<span class="string">'./individual'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> random = math.random;</span><br><span class="line"><span class="keyword">var</span> DOUBLE_MIN_VALUE = math.consts.DOUBLE_MIN_VALUE;</span><br><span class="line"><span class="keyword">var</span> DOUBLE_MAX_VALUE = math.consts.DOUBLE_MAX_VALUE;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="comment">/*大自然                                                                  */</span></span><br><span class="line"><span class="comment">/*引导种群的进化方向                                                      */</span></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：Nature</span></span><br><span class="line"><span class="comment">*功能概要：构造函数</span></span><br><span class="line"><span class="comment">*param@1popSize:种群大小</span></span><br><span class="line"><span class="comment">*param@2mutationRate:基因突变的概率</span></span><br><span class="line"><span class="comment">*param@3maxPerturbation:最大的变异步长</span></span><br><span class="line"><span class="comment">*param@4leftInterval:左区间</span></span><br><span class="line"><span class="comment">*param@5rightInterval:右区间</span></span><br><span class="line"><span class="comment">*param@6assessmentFunction:个体适应度评估函数</span></span><br><span class="line"><span class="comment">*返回值：无</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Nature</span>(<span class="params">popSize,mutationRate,maxPerturbation,leftInterval,rightInterval,assessmentFunction</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Nature))&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'调用方式有误!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//种群大小</span></span><br><span class="line"><span class="keyword">this</span>.popSize = popSize;</span><br><span class="line"><span class="comment">//基因突变概率</span></span><br><span class="line"><span class="keyword">this</span>.mutationRate = mutationRate;</span><br><span class="line"><span class="comment">//最大变异步长</span></span><br><span class="line"><span class="keyword">this</span>.maxPerturbation = maxPerturbation;</span><br><span class="line"><span class="comment">//左区间</span></span><br><span class="line"><span class="keyword">this</span>.leftInterval = leftInterval;</span><br><span class="line"><span class="comment">//右区间</span></span><br><span class="line"><span class="keyword">this</span>.rightInterval = rightInterval;</span><br><span class="line"><span class="comment">//评估函数</span></span><br><span class="line"><span class="keyword">this</span>.assessmentFunction = assessmentFunction;</span><br><span class="line"></span><br><span class="line"><span class="comment">//种群适应度综合</span></span><br><span class="line"><span class="keyword">this</span>.totalFitness = <span class="number">0.0</span>;</span><br><span class="line"><span class="comment">//种群最优个体适应度</span></span><br><span class="line"><span class="keyword">this</span>.bestFitness  = DOUBLE_MIN_VALUE;</span><br><span class="line"><span class="comment">//种群平均适应度</span></span><br><span class="line"><span class="keyword">this</span>.averageFitness = <span class="number">0.0</span>;</span><br><span class="line"><span class="comment">//种群最低适应度</span></span><br><span class="line"><span class="keyword">this</span>.worstFitness = DOUBLE_MAX_VALUE;</span><br><span class="line"><span class="comment">//当前种群的代数</span></span><br><span class="line"><span class="keyword">this</span>.generation = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//种群</span></span><br><span class="line"><span class="keyword">this</span>.population = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;popSize;i++)&#123;</span><br><span class="line"><span class="keyword">var</span> individual = <span class="keyword">new</span> Individual();</span><br><span class="line">individual.vecChromosome.push(random.randomIntLCRC(leftInterval,rightInterval));</span><br><span class="line">individual.fitness = assessmentFunction(individual.vecChromosome[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">this</span>.population.push(individual);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.CalculateFitness();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：CalculateFitness</span></span><br><span class="line"><span class="comment">*功能概要： 统计整个种群的进化数据</span></span><br><span class="line"><span class="comment">*params无</span></span><br><span class="line"><span class="comment">*返回值：无</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">Nature.prototype.CalculateFitness = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.population.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a.fitness - b.fitness);</span><br><span class="line"><span class="keyword">this</span>.totalFitness = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">this</span>.averageFitness = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">this</span>.worstFitness = DOUBLE_MAX_VALUE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i &lt; <span class="keyword">this</span>.popSize;i++)&#123;</span><br><span class="line"><span class="keyword">this</span>.totalFitness += <span class="keyword">this</span>.population[i].fitness;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.population[i].fitness &gt; <span class="keyword">this</span>.bestFitness)&#123;</span><br><span class="line"><span class="keyword">this</span>.bestFitness = <span class="keyword">this</span>.population[i].fitness;</span><br><span class="line"><span class="keyword">this</span>.bestIndividual = <span class="keyword">this</span>.population[i];</span><br><span class="line"><span class="keyword">this</span>.first = <span class="keyword">this</span>.generation;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.population[i].fitness &lt; <span class="keyword">this</span>.worstFitness)&#123;</span><br><span class="line"><span class="keyword">this</span>.worstFitness = <span class="keyword">this</span>.population[i].fitness;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.averageFitness = <span class="keyword">this</span>.totalFitness / <span class="keyword">this</span>.popSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：GetChromoRoulette</span></span><br><span class="line"><span class="comment">*功能概要： 轮盘赌选择</span></span><br><span class="line"><span class="comment">*params无</span></span><br><span class="line"><span class="comment">*返回值：无</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">Nature.prototype.GetChromoRoulette = <span class="function"><span class="keyword">function</span>(<span class="params">pop</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> individual = <span class="keyword">new</span> Individual();</span><br><span class="line"><span class="keyword">var</span> temp = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">var</span> slice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.worstFitness &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">slice = random.random() * <span class="keyword">this</span>.totalFitness;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="keyword">this</span>.popSize;i++)&#123;</span><br><span class="line">temp += pop[i].fitness;</span><br><span class="line"><span class="keyword">if</span>(temp &gt;= slice)&#123;</span><br><span class="line">individual = pop[i];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">var</span> pseudoTotalFitness = <span class="keyword">this</span>.totalFitness + (<span class="number">-1</span>)*<span class="keyword">this</span>.popSize*<span class="keyword">this</span>.worstFitness;</span><br><span class="line">slice = random.random()*pseudoTotalFitness;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="keyword">this</span>.popSize;i++)&#123;</span><br><span class="line">temp += pop[i].fitness + (<span class="number">-1</span>)*<span class="keyword">this</span>.worstFitness;</span><br><span class="line"><span class="keyword">if</span>(temp &gt;= slice)&#123;</span><br><span class="line">individual = pop[i];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//避免因浮点数的精度误差造成错误</span></span><br><span class="line"><span class="keyword">if</span>(individual.fitness == <span class="number">0</span>)&#123;</span><br><span class="line">individual = pop[<span class="keyword">this</span>.popSize<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> individual;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：Mutate</span></span><br><span class="line"><span class="comment">*功能概要： 基因突变</span></span><br><span class="line"><span class="comment">*params无</span></span><br><span class="line"><span class="comment">*返回值：无</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">Nature.prototype.Mutate = <span class="function"><span class="keyword">function</span>(<span class="params">individual</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(random.random()&lt;= <span class="keyword">this</span>.mutationRate)&#123;</span><br><span class="line">individual.vecChromosome[<span class="number">0</span>] += (random.random()<span class="number">-0.5</span>)*<span class="keyword">this</span>.maxPerturbation;</span><br><span class="line"><span class="keyword">if</span>(individual.vecChromosome[<span class="number">0</span>]&gt; <span class="keyword">this</span>.rightInterval)&#123;</span><br><span class="line">individual.vecChromosome[<span class="number">0</span>] = <span class="keyword">this</span>.rightInterval;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(individual.vecChromosome[<span class="number">0</span>] &lt; <span class="keyword">this</span>.leftInterval)&#123;</span><br><span class="line">individual.vecChromosome[<span class="number">0</span>] = <span class="keyword">this</span>.leftInterval;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Nature.prototype.Reproduction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> temp = <span class="keyword">this</span>.population.slice(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">this</span>.population = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">this</span>.population.length &lt; <span class="keyword">this</span>.popSize)&#123;</span><br><span class="line"><span class="keyword">var</span> individual = <span class="keyword">this</span>.GetChromoRoulette(temp);</span><br><span class="line"><span class="keyword">this</span>.Mutate(individual);</span><br><span class="line">individual.fitness = <span class="keyword">this</span>.assessmentFunction(individual.vecChromosome[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">this</span>.population.push(individual);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="keyword">this</span>.popSize;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.population[i].fitness &gt;= <span class="keyword">this</span>.bestIndividual.fitness)&#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="keyword">this</span>.population[random.randomIntLCRC(<span class="number">0</span>,<span class="keyword">this</span>.popSize<span class="number">-1</span>)] = <span class="keyword">this</span>.bestIndividual;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.generation++;</span><br><span class="line"><span class="keyword">this</span>.CalculateFitness();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Nature;</span><br></pre></td></tr></table></figure><h3 id="individual-js"><a href="#individual-js" class="headerlink" title="individual.js"></a>individual.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="comment">/*个体                                                                    */</span></span><br><span class="line"><span class="comment">/*将求解过程模拟成物种的进化、最终经过自然选择存活下来的个体便为"最优解"  */</span></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：Individual</span></span><br><span class="line"><span class="comment">*功能概要：默认构造函数</span></span><br><span class="line"><span class="comment">*param@1vecChromosome基因型</span></span><br><span class="line"><span class="comment">*param@1fitness适应度</span></span><br><span class="line"><span class="comment">*返回值：无</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Individual</span>(<span class="params">vecChromosome,fitness</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Individual))&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'调用方式有误!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基因型</span></span><br><span class="line"><span class="keyword">this</span>.vecChromosome = vecChromosome || [];</span><br><span class="line"><span class="comment">//个体适应度</span></span><br><span class="line"><span class="keyword">this</span>.fitness = fitness || <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*函数名：clone</span></span><br><span class="line"><span class="comment">*功能概要：复制对象</span></span><br><span class="line"><span class="comment">*返回值：复制后生成的对象</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">Individual.prototype.clone = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> individual = <span class="keyword">new</span> Individual();</span><br><span class="line">individual.fitness = <span class="keyword">this</span>.fitness;</span><br><span class="line">individual.vecChromosome = <span class="keyword">this</span>.vecChromosome.slice(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> individual;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Individual;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> genetic = <span class="built_in">require</span>(<span class="string">'asgc-ai'</span>).genetic;</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否打印进化过程中的日志</span></span><br><span class="line">genetic.setLog(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> engine = <span class="keyword">new</span> genetic.Engine(<span class="number">500</span>,<span class="number">0.8</span>,<span class="number">300</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * v + <span class="number">1</span>;</span><br><span class="line"><span class="comment">//return Math.sin(v);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">engine.OnStart();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"种群最优个体适应度：%f"</span>,engine.GetBeseFitness());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"种群最优个体基因型：%f"</span>,engine.GetBestChromosome());</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;最优解问题，可以想象成生物的进化：生物进化需要一个初始的种群，即对应程序中需要给出一组问题的初始解，初始解的产生应尽可能简单，原则上问题的求解过程不应该依赖于初始解的设定，而应该依赖于进化。生物进行基因突变、基因重组，是生物多样化的基础，因此程序中为了避免陷入局部最优解，也需要引入类似的操作，下面的程序引入了基因突变。大自然对种群进行自然选择，保证了优良个体有更多的机会遗传到下一代，从而实现进化。所以程序中需要大自然这一角色对控制种群的进化方向。&lt;/p&gt;
&lt;p&gt;既然有基因，程序中不可避免就涉及到基因的编码与解码。按照更接近于大自然的方式，可以使用二进制编码，更容易实现基因突变和基因重组，但需要不断进行编码解码，运算效率稍低。这里，我采用的是浮点数编码，写的第一个版本，为了简单，这里只引入了基因突变。相当于无性繁殖，比有性繁殖进化慢，故可以加长进化代数，以求更加接近最优解。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://blog.aoshiguchen.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="遗传算法" scheme="http://blog.aoshiguchen.com/categories/%E7%AE%97%E6%B3%95/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="node" scheme="http://blog.aoshiguchen.com/tags/node/"/>
    
      <category term="算法" scheme="http://blog.aoshiguchen.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="遗传算法" scheme="http://blog.aoshiguchen.com/tags/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>1、在CentOS上安装Docker</title>
    <link href="http://blog.aoshiguchen.com/2018/01/04/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Docker/1%E3%80%81%E5%9C%A8CentOS%E4%B8%8A%E5%AE%89%E8%A3%85Docker/"/>
    <id>http://blog.aoshiguchen.com/2018/01/04/开发工具/Docker/1、在CentOS上安装Docker/</id>
    <published>2018-01-03T16:00:00.000Z</published>
    <updated>2018-01-04T07:49:10.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>  ● 操作系统 CentOS 7.2 64位<br>  ● CPU 1核<br>  ● 内存 1GB</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker-io</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker start</span><br></pre></td></tr></table></figure><h2 id="加入开机启动"><a href="#加入开机启动" class="headerlink" title="加入开机启动"></a>加入开机启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig docker on</span><br></pre></td></tr></table></figure><h2 id="从docker-io中下载centos镜像到本地-var-lib-docker-graph"><a href="#从docker-io中下载centos镜像到本地-var-lib-docker-graph" class="headerlink" title="从docker.io中下载centos镜像到本地 /var/lib/docker/graph"></a>从docker.io中下载centos镜像到本地 /var/lib/docker/graph</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos:latest</span><br></pre></td></tr></table></figure><h2 id="查看已下载的镜像"><a href="#查看已下载的镜像" class="headerlink" title="查看已下载的镜像"></a>查看已下载的镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="启动一个容器"><a href="#启动一个容器" class="headerlink" title="启动一个容器"></a>启动一个容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t centos /bin/bash</span><br></pre></td></tr></table></figure><h2 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h2><p>ctrl+d 退出容器且关闭, docker ps 查看无<br>ctrl+p+q 退出容器但不关闭, docker ps 查看有</p><h2 id="查看所有容器"><a href="#查看所有容器" class="headerlink" title="查看所有容器"></a>查看所有容器</h2><p>docker ps</p><img src="/2018/01/04/开发工具/Docker/1、在CentOS上安装Docker/01.png"><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach 44fc0f0582d9</span><br></pre></td></tr></table></figure><img src="/2018/01/04/开发工具/Docker/1、在CentOS上安装Docker/02.png">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;p&gt;  ● 操作系统 CentOS 7.2 64位&lt;br&gt;  ● CPU 1核&lt;br&gt;  ● 内存 1GB&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum -y install docker-io&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://blog.aoshiguchen.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Docker" scheme="http://blog.aoshiguchen.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Docker/"/>
    
    
      <category term="开发工具" scheme="http://blog.aoshiguchen.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="linux" scheme="http://blog.aoshiguchen.com/tags/linux/"/>
    
      <category term="Docker" scheme="http://blog.aoshiguchen.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>2、卸载Docker</title>
    <link href="http://blog.aoshiguchen.com/2018/01/04/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Docker/2%E3%80%81%E5%8D%B8%E8%BD%BDDocker/"/>
    <id>http://blog.aoshiguchen.com/2018/01/04/开发工具/Docker/2、卸载Docker/</id>
    <published>2018-01-03T16:00:00.000Z</published>
    <updated>2018-01-04T07:50:19.453Z</updated>
    
    <content type="html"><![CDATA[<h2 id="列出你安装过的包"><a href="#列出你安装过的包" class="headerlink" title="列出你安装过的包"></a>列出你安装过的包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list installed | grep docker</span><br></pre></td></tr></table></figure><a id="more"></a><img src="/2018/01/04/开发工具/Docker/2、卸载Docker/01.png"><h2 id="删除安装包"><a href="#删除安装包" class="headerlink" title="删除安装包"></a>删除安装包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove docker.x86_64</span><br><span class="line">yum -y remove docker-client.x86_64 </span><br><span class="line">yum -y remove docker-common.x86_64</span><br></pre></td></tr></table></figure><h2 id="删除镜像-容器等"><a href="#删除镜像-容器等" class="headerlink" title="删除镜像/容器等"></a>删除镜像/容器等</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;列出你安装过的包&quot;&gt;&lt;a href=&quot;#列出你安装过的包&quot; class=&quot;headerlink&quot; title=&quot;列出你安装过的包&quot;&gt;&lt;/a&gt;列出你安装过的包&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum list installed | grep docker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://blog.aoshiguchen.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Docker" scheme="http://blog.aoshiguchen.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Docker/"/>
    
    
      <category term="开发工具" scheme="http://blog.aoshiguchen.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="linux" scheme="http://blog.aoshiguchen.com/tags/linux/"/>
    
      <category term="Docker" scheme="http://blog.aoshiguchen.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>为hexo的next主题应用短链功能</title>
    <link href="http://blog.aoshiguchen.com/2017/12/27/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/hexo/%E4%B8%BAhexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E5%BA%94%E7%94%A8%E7%9F%AD%E9%93%BE%E5%8A%9F%E8%83%BD/"/>
    <id>http://blog.aoshiguchen.com/2017/12/27/开发工具/hexo/为hexo的next主题应用短链功能/</id>
    <published>2017-12-26T16:00:00.000Z</published>
    <updated>2017-12-29T07:54:31.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>原理上本博客内容对所有网站都适用，不过本篇讲述是基于hexo的next主题上的应用。如果你恰好是用hexo搭建博客，且应用得是next主题，那么恭喜你，你可以直接复制下面的代码应用短链服务。否则，你得根据自己网站的需要进行相应的适应性修改。</p><a id="more"></a><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>本功能需要用到md5算法，所以首先需要做的是准备一个md5算法的js库。你可以到网上下载，由于md5算法代码不是很长，为了方便，直接贴在下面，你可以复制保存为md5.js备用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * JavaScript MD5 1.0.1</span></span><br><span class="line"><span class="comment"> * https://github.com/blueimp/JavaScript-MD5</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Copyright 2011, Sebastian Tschan</span></span><br><span class="line"><span class="comment"> * https://blueimp.net</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the MIT license:</span></span><br><span class="line"><span class="comment"> * http://www.opensource.org/licenses/MIT</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Based on</span></span><br><span class="line"><span class="comment"> * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message</span></span><br><span class="line"><span class="comment"> * Digest Algorithm, as defined in RFC 1321.</span></span><br><span class="line"><span class="comment"> * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009</span></span><br><span class="line"><span class="comment"> * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet</span></span><br><span class="line"><span class="comment"> * Distributed under the BSD License</span></span><br><span class="line"><span class="comment"> * See http://pajhome.org.uk/crypt/md5 for more info.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*jslint bitwise: true */</span></span><br><span class="line"><span class="comment">/*global unescape, define */</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Add integers, wrapping at 2^32. This uses 16-bit operations internally</span></span><br><span class="line"><span class="comment">    * to work around bugs in some JS interpreters.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">safe_add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> lsw = (x &amp; <span class="number">0xFFFF</span>) + (y &amp; <span class="number">0xFFFF</span>),</span><br><span class="line">            msw = (x &gt;&gt; <span class="number">16</span>) + (y &gt;&gt; <span class="number">16</span>) + (lsw &gt;&gt; <span class="number">16</span>);</span><br><span class="line">        <span class="keyword">return</span> (msw &lt;&lt; <span class="number">16</span>) | (lsw &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Bitwise rotate a 32-bit number to the left.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bit_rol</span>(<span class="params">num, cnt</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (num &lt;&lt; cnt) | (num &gt;&gt;&gt; (<span class="number">32</span> - cnt));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * These functions implement the four basic operations the algorithm uses.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">md5_cmn</span>(<span class="params">q, a, b, x, s, t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">md5_ff</span>(<span class="params">a, b, c, d, x, s, t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> md5_cmn((b &amp; c) | ((~b) &amp; d), a, b, x, s, t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">md5_gg</span>(<span class="params">a, b, c, d, x, s, t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> md5_cmn((b &amp; d) | (c &amp; (~d)), a, b, x, s, t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">md5_hh</span>(<span class="params">a, b, c, d, x, s, t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> md5_cmn(b ^ c ^ d, a, b, x, s, t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">md5_ii</span>(<span class="params">a, b, c, d, x, s, t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> md5_cmn(c ^ (b | (~d)), a, b, x, s, t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Calculate the MD5 of an array of little-endian words, and a bit length.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">binl_md5</span>(<span class="params">x, len</span>) </span>&#123;</span><br><span class="line">        <span class="comment">/* append padding */</span></span><br><span class="line">        x[len &gt;&gt; <span class="number">5</span>] |= <span class="number">0x80</span> &lt;&lt; (len % <span class="number">32</span>);</span><br><span class="line">        x[(((len + <span class="number">64</span>) &gt;&gt;&gt; <span class="number">9</span>) &lt;&lt; <span class="number">4</span>) + <span class="number">14</span>] = len;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> i, olda, oldb, oldc, oldd,</span><br><span class="line">            a =  <span class="number">1732584193</span>,</span><br><span class="line">            b = <span class="number">-271733879</span>,</span><br><span class="line">            c = <span class="number">-1732584194</span>,</span><br><span class="line">            d =  <span class="number">271733878</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; x.length; i += <span class="number">16</span>) &#123;</span><br><span class="line">            olda = a;</span><br><span class="line">            oldb = b;</span><br><span class="line">            oldc = c;</span><br><span class="line">            oldd = d;</span><br><span class="line"></span><br><span class="line">            a = md5_ff(a, b, c, d, x[i],       <span class="number">7</span>, <span class="number">-680876936</span>);</span><br><span class="line">            d = md5_ff(d, a, b, c, x[i +  <span class="number">1</span>], <span class="number">12</span>, <span class="number">-389564586</span>);</span><br><span class="line">            c = md5_ff(c, d, a, b, x[i +  <span class="number">2</span>], <span class="number">17</span>,  <span class="number">606105819</span>);</span><br><span class="line">            b = md5_ff(b, c, d, a, x[i +  <span class="number">3</span>], <span class="number">22</span>, <span class="number">-1044525330</span>);</span><br><span class="line">            a = md5_ff(a, b, c, d, x[i +  <span class="number">4</span>],  <span class="number">7</span>, <span class="number">-176418897</span>);</span><br><span class="line">            d = md5_ff(d, a, b, c, x[i +  <span class="number">5</span>], <span class="number">12</span>,  <span class="number">1200080426</span>);</span><br><span class="line">            c = md5_ff(c, d, a, b, x[i +  <span class="number">6</span>], <span class="number">17</span>, <span class="number">-1473231341</span>);</span><br><span class="line">            b = md5_ff(b, c, d, a, x[i +  <span class="number">7</span>], <span class="number">22</span>, <span class="number">-45705983</span>);</span><br><span class="line">            a = md5_ff(a, b, c, d, x[i +  <span class="number">8</span>],  <span class="number">7</span>,  <span class="number">1770035416</span>);</span><br><span class="line">            d = md5_ff(d, a, b, c, x[i +  <span class="number">9</span>], <span class="number">12</span>, <span class="number">-1958414417</span>);</span><br><span class="line">            c = md5_ff(c, d, a, b, x[i + <span class="number">10</span>], <span class="number">17</span>, <span class="number">-42063</span>);</span><br><span class="line">            b = md5_ff(b, c, d, a, x[i + <span class="number">11</span>], <span class="number">22</span>, <span class="number">-1990404162</span>);</span><br><span class="line">            a = md5_ff(a, b, c, d, x[i + <span class="number">12</span>],  <span class="number">7</span>,  <span class="number">1804603682</span>);</span><br><span class="line">            d = md5_ff(d, a, b, c, x[i + <span class="number">13</span>], <span class="number">12</span>, <span class="number">-40341101</span>);</span><br><span class="line">            c = md5_ff(c, d, a, b, x[i + <span class="number">14</span>], <span class="number">17</span>, <span class="number">-1502002290</span>);</span><br><span class="line">            b = md5_ff(b, c, d, a, x[i + <span class="number">15</span>], <span class="number">22</span>,  <span class="number">1236535329</span>);</span><br><span class="line"></span><br><span class="line">            a = md5_gg(a, b, c, d, x[i +  <span class="number">1</span>],  <span class="number">5</span>, <span class="number">-165796510</span>);</span><br><span class="line">            d = md5_gg(d, a, b, c, x[i +  <span class="number">6</span>],  <span class="number">9</span>, <span class="number">-1069501632</span>);</span><br><span class="line">            c = md5_gg(c, d, a, b, x[i + <span class="number">11</span>], <span class="number">14</span>,  <span class="number">643717713</span>);</span><br><span class="line">            b = md5_gg(b, c, d, a, x[i],      <span class="number">20</span>, <span class="number">-373897302</span>);</span><br><span class="line">            a = md5_gg(a, b, c, d, x[i +  <span class="number">5</span>],  <span class="number">5</span>, <span class="number">-701558691</span>);</span><br><span class="line">            d = md5_gg(d, a, b, c, x[i + <span class="number">10</span>],  <span class="number">9</span>,  <span class="number">38016083</span>);</span><br><span class="line">            c = md5_gg(c, d, a, b, x[i + <span class="number">15</span>], <span class="number">14</span>, <span class="number">-660478335</span>);</span><br><span class="line">            b = md5_gg(b, c, d, a, x[i +  <span class="number">4</span>], <span class="number">20</span>, <span class="number">-405537848</span>);</span><br><span class="line">            a = md5_gg(a, b, c, d, x[i +  <span class="number">9</span>],  <span class="number">5</span>,  <span class="number">568446438</span>);</span><br><span class="line">            d = md5_gg(d, a, b, c, x[i + <span class="number">14</span>],  <span class="number">9</span>, <span class="number">-1019803690</span>);</span><br><span class="line">            c = md5_gg(c, d, a, b, x[i +  <span class="number">3</span>], <span class="number">14</span>, <span class="number">-187363961</span>);</span><br><span class="line">            b = md5_gg(b, c, d, a, x[i +  <span class="number">8</span>], <span class="number">20</span>,  <span class="number">1163531501</span>);</span><br><span class="line">            a = md5_gg(a, b, c, d, x[i + <span class="number">13</span>],  <span class="number">5</span>, <span class="number">-1444681467</span>);</span><br><span class="line">            d = md5_gg(d, a, b, c, x[i +  <span class="number">2</span>],  <span class="number">9</span>, <span class="number">-51403784</span>);</span><br><span class="line">            c = md5_gg(c, d, a, b, x[i +  <span class="number">7</span>], <span class="number">14</span>,  <span class="number">1735328473</span>);</span><br><span class="line">            b = md5_gg(b, c, d, a, x[i + <span class="number">12</span>], <span class="number">20</span>, <span class="number">-1926607734</span>);</span><br><span class="line"></span><br><span class="line">            a = md5_hh(a, b, c, d, x[i +  <span class="number">5</span>],  <span class="number">4</span>, <span class="number">-378558</span>);</span><br><span class="line">            d = md5_hh(d, a, b, c, x[i +  <span class="number">8</span>], <span class="number">11</span>, <span class="number">-2022574463</span>);</span><br><span class="line">            c = md5_hh(c, d, a, b, x[i + <span class="number">11</span>], <span class="number">16</span>,  <span class="number">1839030562</span>);</span><br><span class="line">            b = md5_hh(b, c, d, a, x[i + <span class="number">14</span>], <span class="number">23</span>, <span class="number">-35309556</span>);</span><br><span class="line">            a = md5_hh(a, b, c, d, x[i +  <span class="number">1</span>],  <span class="number">4</span>, <span class="number">-1530992060</span>);</span><br><span class="line">            d = md5_hh(d, a, b, c, x[i +  <span class="number">4</span>], <span class="number">11</span>,  <span class="number">1272893353</span>);</span><br><span class="line">            c = md5_hh(c, d, a, b, x[i +  <span class="number">7</span>], <span class="number">16</span>, <span class="number">-155497632</span>);</span><br><span class="line">            b = md5_hh(b, c, d, a, x[i + <span class="number">10</span>], <span class="number">23</span>, <span class="number">-1094730640</span>);</span><br><span class="line">            a = md5_hh(a, b, c, d, x[i + <span class="number">13</span>],  <span class="number">4</span>,  <span class="number">681279174</span>);</span><br><span class="line">            d = md5_hh(d, a, b, c, x[i],      <span class="number">11</span>, <span class="number">-358537222</span>);</span><br><span class="line">            c = md5_hh(c, d, a, b, x[i +  <span class="number">3</span>], <span class="number">16</span>, <span class="number">-722521979</span>);</span><br><span class="line">            b = md5_hh(b, c, d, a, x[i +  <span class="number">6</span>], <span class="number">23</span>,  <span class="number">76029189</span>);</span><br><span class="line">            a = md5_hh(a, b, c, d, x[i +  <span class="number">9</span>],  <span class="number">4</span>, <span class="number">-640364487</span>);</span><br><span class="line">            d = md5_hh(d, a, b, c, x[i + <span class="number">12</span>], <span class="number">11</span>, <span class="number">-421815835</span>);</span><br><span class="line">            c = md5_hh(c, d, a, b, x[i + <span class="number">15</span>], <span class="number">16</span>,  <span class="number">530742520</span>);</span><br><span class="line">            b = md5_hh(b, c, d, a, x[i +  <span class="number">2</span>], <span class="number">23</span>, <span class="number">-995338651</span>);</span><br><span class="line"></span><br><span class="line">            a = md5_ii(a, b, c, d, x[i],       <span class="number">6</span>, <span class="number">-198630844</span>);</span><br><span class="line">            d = md5_ii(d, a, b, c, x[i +  <span class="number">7</span>], <span class="number">10</span>,  <span class="number">1126891415</span>);</span><br><span class="line">            c = md5_ii(c, d, a, b, x[i + <span class="number">14</span>], <span class="number">15</span>, <span class="number">-1416354905</span>);</span><br><span class="line">            b = md5_ii(b, c, d, a, x[i +  <span class="number">5</span>], <span class="number">21</span>, <span class="number">-57434055</span>);</span><br><span class="line">            a = md5_ii(a, b, c, d, x[i + <span class="number">12</span>],  <span class="number">6</span>,  <span class="number">1700485571</span>);</span><br><span class="line">            d = md5_ii(d, a, b, c, x[i +  <span class="number">3</span>], <span class="number">10</span>, <span class="number">-1894986606</span>);</span><br><span class="line">            c = md5_ii(c, d, a, b, x[i + <span class="number">10</span>], <span class="number">15</span>, <span class="number">-1051523</span>);</span><br><span class="line">            b = md5_ii(b, c, d, a, x[i +  <span class="number">1</span>], <span class="number">21</span>, <span class="number">-2054922799</span>);</span><br><span class="line">            a = md5_ii(a, b, c, d, x[i +  <span class="number">8</span>],  <span class="number">6</span>,  <span class="number">1873313359</span>);</span><br><span class="line">            d = md5_ii(d, a, b, c, x[i + <span class="number">15</span>], <span class="number">10</span>, <span class="number">-30611744</span>);</span><br><span class="line">            c = md5_ii(c, d, a, b, x[i +  <span class="number">6</span>], <span class="number">15</span>, <span class="number">-1560198380</span>);</span><br><span class="line">            b = md5_ii(b, c, d, a, x[i + <span class="number">13</span>], <span class="number">21</span>,  <span class="number">1309151649</span>);</span><br><span class="line">            a = md5_ii(a, b, c, d, x[i +  <span class="number">4</span>],  <span class="number">6</span>, <span class="number">-145523070</span>);</span><br><span class="line">            d = md5_ii(d, a, b, c, x[i + <span class="number">11</span>], <span class="number">10</span>, <span class="number">-1120210379</span>);</span><br><span class="line">            c = md5_ii(c, d, a, b, x[i +  <span class="number">2</span>], <span class="number">15</span>,  <span class="number">718787259</span>);</span><br><span class="line">            b = md5_ii(b, c, d, a, x[i +  <span class="number">9</span>], <span class="number">21</span>, <span class="number">-343485551</span>);</span><br><span class="line"></span><br><span class="line">            a = safe_add(a, olda);</span><br><span class="line">            b = safe_add(b, oldb);</span><br><span class="line">            c = safe_add(c, oldc);</span><br><span class="line">            d = safe_add(d, oldd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> [a, b, c, d];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Convert an array of little-endian words to a string</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">binl2rstr</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> i,</span><br><span class="line">            output = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; input.length * <span class="number">32</span>; i += <span class="number">8</span>) &#123;</span><br><span class="line">            output += <span class="built_in">String</span>.fromCharCode((input[i &gt;&gt; <span class="number">5</span>] &gt;&gt;&gt; (i % <span class="number">32</span>)) &amp; <span class="number">0xFF</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Convert a raw string to an array of little-endian words</span></span><br><span class="line"><span class="comment">    * Characters &gt;255 have their high-byte silently ignored.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">rstr2binl</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> i,</span><br><span class="line">            output = [];</span><br><span class="line">        output[(input.length &gt;&gt; <span class="number">2</span>) - <span class="number">1</span>] = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; output.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">            output[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; input.length * <span class="number">8</span>; i += <span class="number">8</span>) &#123;</span><br><span class="line">            output[i &gt;&gt; <span class="number">5</span>] |= (input.charCodeAt(i / <span class="number">8</span>) &amp; <span class="number">0xFF</span>) &lt;&lt; (i % <span class="number">32</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Calculate the MD5 of a raw string</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">rstr_md5</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> binl2rstr(binl_md5(rstr2binl(s), s.length * <span class="number">8</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Calculate the HMAC-MD5, of a key and some data (raw strings)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">rstr_hmac_md5</span>(<span class="params">key, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> i,</span><br><span class="line">            bkey = rstr2binl(key),</span><br><span class="line">            ipad = [],</span><br><span class="line">            opad = [],</span><br><span class="line">            hash;</span><br><span class="line">        ipad[<span class="number">15</span>] = opad[<span class="number">15</span>] = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">if</span> (bkey.length &gt; <span class="number">16</span>) &#123;</span><br><span class="line">            bkey = binl_md5(bkey, key.length * <span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">            ipad[i] = bkey[i] ^ <span class="number">0x36363636</span>;</span><br><span class="line">            opad[i] = bkey[i] ^ <span class="number">0x5C5C5C5C</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        hash = binl_md5(ipad.concat(rstr2binl(data)), <span class="number">512</span> + data.length * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">return</span> binl2rstr(binl_md5(opad.concat(hash), <span class="number">512</span> + <span class="number">128</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Convert a raw string to a hex string</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">rstr2hex</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> hex_tab = <span class="string">'0123456789abcdef'</span>,</span><br><span class="line">            output = <span class="string">''</span>,</span><br><span class="line">            x,</span><br><span class="line">            i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; input.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">            x = input.charCodeAt(i);</span><br><span class="line">            output += hex_tab.charAt((x &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>) +</span><br><span class="line">                hex_tab.charAt(x &amp; <span class="number">0x0F</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Encode a string as utf-8</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2rstr_utf8</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(input));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Take string arguments and return either raw or hex encoded strings</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">raw_md5</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rstr_md5(str2rstr_utf8(s));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hex_md5</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rstr2hex(raw_md5(s));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">raw_hmac_md5</span>(<span class="params">k, d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hex_hmac_md5</span>(<span class="params">k, d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rstr2hex(raw_hmac_md5(k, d));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">md5</span>(<span class="params">string, key, raw</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!key) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!raw) &#123;</span><br><span class="line">                <span class="keyword">return</span> hex_md5(string);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> raw_md5(string);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!raw) &#123;</span><br><span class="line">            <span class="keyword">return</span> hex_hmac_md5(key, string);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> raw_hmac_md5(key, string);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">        define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> md5;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $.md5 = md5;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;(<span class="keyword">this</span>));</span><br></pre></td></tr></table></figure><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><ul><li>将md5.js复制到next主题下的source/js/src目录下</li><li>打开layout_scripts\commons.swig，给js_commons数组开头插入一个字符串：’src/md5.js’，请记住一定要在第一个，因为稍后我们需要在source/js/src/utils.js中编写代码，md5.js必须在之前加载好。添加后文件内容如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;%</span><br><span class="line">  set js_commons = [</span><br><span class="line">  &apos;src/md5.js&apos;,</span><br><span class="line">    &apos;src/utils.js&apos;,</span><br><span class="line">    &apos;src/motion.js&apos;</span><br><span class="line">  ]</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">&#123;% for common in js_commons %&#125;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;&#123;&#123; url_for(theme.js) &#125;&#125;/&#123;&#123; common &#125;&#125;?v=&#123;&#123; theme.version &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h2 id="生成短链映射数据"><a href="#生成短链映射数据" class="headerlink" title="生成短链映射数据"></a>生成短链映射数据</h2><p>在blog根目录(public同级目录)下，新建一个generate.js文件，文件内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> md5 = <span class="built_in">require</span>(<span class="string">'./themes/me/source/js/src/md5'</span>).md5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ROOT_DIR = <span class="string">'public'</span>;</span><br><span class="line"><span class="keyword">var</span> EXCLUDE = [<span class="string">'/css'</span>,<span class="string">'/image'</span>,<span class="string">'/js'</span>,<span class="string">'/lib'</span>,<span class="string">'/atom.xml'</span>,<span class="string">'/favicon.ico'</span>,<span class="string">'/index.html'</span>,<span class="string">'/search.xml'</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.indexOf = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,n=<span class="keyword">this</span>.length; i&lt;n; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>[i] === val)&#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.startsWith = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">of</span> <span class="keyword">this</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(val.startsWith(item))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归遍历文件</span></span><br><span class="line"><span class="keyword">var</span> getFileList = <span class="function"><span class="keyword">function</span>(<span class="params">path,exclude</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ergodicFile = <span class="function"><span class="keyword">function</span>(<span class="params">path,relativePath,fileList</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!fs.existsSync(path))&#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(exclude.startsWith(relativePath))&#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> files = fs.readdirSync(path);</span><br><span class="line">    files.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">var</span> states = fs.statSync(path + <span class="string">'/'</span> + file);</span><br><span class="line">      <span class="keyword">if</span>(states.isDirectory())&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">        obj.type = <span class="string">'dir'</span>;</span><br><span class="line">        obj.size = states.size;</span><br><span class="line">        obj.name = file;</span><br><span class="line">        obj.path = path + <span class="string">'/'</span> + file;</span><br><span class="line">        obj.relativePath = relativePath + <span class="string">'/'</span> + file;</span><br><span class="line">        fileList.push(obj);</span><br><span class="line"></span><br><span class="line">        ergodicFile(path + <span class="string">'/'</span> + file,relativePath + <span class="string">'/'</span> + file,fileList);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// else&#123;</span></span><br><span class="line">      <span class="comment">//  var obj = &#123;&#125;;</span></span><br><span class="line">      <span class="comment">//  obj.type = 'file';</span></span><br><span class="line">      <span class="comment">//  obj.size = states.size;</span></span><br><span class="line">      <span class="comment">//  obj.name = file;</span></span><br><span class="line">      <span class="comment">//  obj.path = path + '/' + file;</span></span><br><span class="line">      <span class="comment">//  obj.relativePath = relativePath + '/' + file;</span></span><br><span class="line">      <span class="comment">//  fileList.push(obj);</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> fileList = [];</span><br><span class="line"></span><br><span class="line">  ergodicFile(path,<span class="string">''</span>,fileList);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> fileList;  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取短链</span></span><br><span class="line"><span class="keyword">var</span> getLinkShort = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> key = <span class="string">'alexis'</span>;</span><br><span class="line">  <span class="keyword">var</span> urlhash = md5(key,url);</span><br><span class="line">  <span class="keyword">var</span> len = urlhash.length;</span><br><span class="line">  <span class="keyword">var</span> charset = <span class="string">'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'</span>;</span><br><span class="line">  <span class="keyword">var</span> shortUrlList = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">//将加密后的串分成4段，每段4字节，对每段进行计算，一共可以生成四组短连接</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> urlhashPiece = urlhash.substr(i * len / <span class="number">4</span>, len / <span class="number">4</span>);</span><br><span class="line">      <span class="comment">//将分段的位与0x3fffffff做位与，0x3fffffff表示二进制数的30个1，即30位以后的加密串都归零</span></span><br><span class="line">      <span class="keyword">var</span> hex = <span class="built_in">parseInt</span>(urlhashPiece,<span class="number">16</span>) &amp; <span class="number">0x3fffffff</span>; <span class="comment">//此处需要用到hexdec()将16进制字符串转为10进制数值型，否则运算会不正常</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> shortUrl = <span class="string">''</span>;</span><br><span class="line">      <span class="comment">//生成6位短连接</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++) &#123;</span><br><span class="line">          <span class="comment">//将得到的值与0x0000003d,3d为61，即charset的坐标最大值</span></span><br><span class="line">          shortUrl += charset.charAt(hex &amp; <span class="number">0x0000003d</span>);</span><br><span class="line">          <span class="comment">//循环完以后将hex右移5位</span></span><br><span class="line">          hex = hex &gt;&gt; <span class="number">5</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      shortUrlList.push(shortUrl);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> shortUrlList[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> duang = <span class="function"><span class="keyword">function</span>(<span class="params">files</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> shortUrl = &#123;&#125;;</span><br><span class="line">  shortUrl.toLong = &#123;&#125;;</span><br><span class="line">  shortUrl.toShort = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> file <span class="keyword">of</span> files)&#123;</span><br><span class="line">    <span class="keyword">var</span> relativePath = file.relativePath.substr(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> hash = <span class="string">'#'</span> + getLinkShort(relativePath);</span><br><span class="line"></span><br><span class="line">    shortUrl.toLong[hash] = relativePath + <span class="string">'/'</span>;</span><br><span class="line">    shortUrl.toShort[relativePath + <span class="string">'/'</span>] = hash;</span><br><span class="line">    shortUrl.toShort[relativePath + <span class="string">'/#more'</span>] = hash;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> shortUrl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fileList = getFileList(ROOT_DIR,EXCLUDE);</span><br><span class="line"><span class="keyword">var</span> shortUrl = duang(fileList);</span><br><span class="line"></span><br><span class="line">fs.writeFile(<span class="string">'./public/shortUrl.json'</span>,<span class="built_in">JSON</span>.stringify(shortUrl),&#123;<span class="attr">flag</span>:<span class="string">'w'</span>,<span class="attr">encoding</span>:<span class="string">'utf-8'</span>,<span class="attr">mode</span>:<span class="string">'0666'</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"文件写入失败"</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"文件写入成功"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="添加短链功能"><a href="#添加短链功能" class="headerlink" title="添加短链功能"></a>添加短链功能</h2><p>打开主题下source/js/src/utils.js文件，在最后面添加如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">me = &#123;&#125;;</span><br><span class="line">NexT.me = me;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.history &amp;&amp; <span class="built_in">window</span>.history.pushState)&#123;</span><br><span class="line">  me.shortUrl = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">//此处配置基网址</span></span><br><span class="line">  me.base = <span class="string">'http://blog.aoshiguchen.com/'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//方便本地测试</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">document</span>.domain == <span class="string">'localhost'</span>)&#123;</span><br><span class="line">    me.base = <span class="string">'http://localhost:4000/'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.ajax(&#123; </span><br><span class="line">    type: <span class="string">"get"</span>, </span><br><span class="line">    url: <span class="string">"/shortUrl.json"</span>, </span><br><span class="line">    cache:<span class="literal">false</span>, </span><br><span class="line">    <span class="keyword">async</span>:<span class="literal">false</span>, </span><br><span class="line">    dataType: <span class="string">"json"</span>,</span><br><span class="line"></span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123; </span><br><span class="line">      me.shortUrl = data;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'shortUrl'</span>,me.shortUrl);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> shortMap = me.shortUrl.toLong;</span><br><span class="line">  <span class="keyword">var</span> longMap = me.shortUrl.toShort;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">document</span>.location.href != me.base)&#123;</span><br><span class="line">      <span class="keyword">var</span> url = <span class="built_in">document</span>.location.href.substr(me.base.length);</span><br><span class="line">    <span class="comment">//如果是短链访问，则跳转到长链</span></span><br><span class="line">    <span class="keyword">if</span>(shortMap[url])&#123;</span><br><span class="line">      <span class="built_in">window</span>.location.href = me.base + shortMap[url];</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(longMap[<span class="built_in">decodeURI</span>(url)])&#123;</span><br><span class="line">      <span class="comment">//如果是长链，则生成对应的短链，并记录到短链、长链映射</span></span><br><span class="line">      <span class="comment">//然后将地址栏回显为短链</span></span><br><span class="line">      <span class="keyword">var</span> shortUrl = longMap[<span class="built_in">decodeURI</span>(url)];</span><br><span class="line"></span><br><span class="line">      history.pushState(<span class="literal">null</span>,<span class="literal">null</span>,<span class="string">'../../../../../../../../../../../../../'</span> + shortUrl);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>在hexo g命令生成静态博客之后，在blog根目录下执行以下命令，执行后会在public目录下生成一个shortUrl.json文件，然后发布即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node generater</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果你按照上面的配置完，恭喜你成功应用上了短链功能。但目前加上这个功能，却留下了一个bug,每次点击浏览器后退时，都需要点击两次才能回到上一页面。有好的解决方案欢迎在下面留言^_^。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;原理上本博客内容对所有网站都适用，不过本篇讲述是基于hexo的next主题上的应用。如果你恰好是用hexo搭建博客，且应用得是next主题，那么恭喜你，你可以直接复制下面的代码应用短链服务。否则，你得根据自己网站的需要进行相应的适应性修改。&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://blog.aoshiguchen.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="hexo" scheme="http://blog.aoshiguchen.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/hexo/"/>
    
    
      <category term="开发工具" scheme="http://blog.aoshiguchen.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="hexo" scheme="http://blog.aoshiguchen.com/tags/hexo/"/>
    
      <category term="next" scheme="http://blog.aoshiguchen.com/tags/next/"/>
    
      <category term="短链" scheme="http://blog.aoshiguchen.com/tags/%E7%9F%AD%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>短链生成算法</title>
    <link href="http://blog.aoshiguchen.com/2017/12/26/%E7%AE%97%E6%B3%95/%E7%9F%AD%E9%93%BE%E7%94%9F%E6%88%90/0.0.1/js/%E7%9F%AD%E9%93%BE%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95/"/>
    <id>http://blog.aoshiguchen.com/2017/12/26/算法/短链生成/0.0.1/js/短链生成算法/</id>
    <published>2017-12-25T16:00:00.000Z</published>
    <updated>2017-12-27T02:31:42.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="何为短链"><a href="#何为短链" class="headerlink" title="何为短链"></a>何为短链</h2><p>短链：即一个较短的链接地址，这个链接地址通常指的是url。</p><h2 id="为什么需要短链"><a href="#为什么需要短链" class="headerlink" title="为什么需要短链"></a>为什么需要短链</h2><p>现而今，互联网无处不在。我们无时无刻都在上网，查看信息，分享信息。而分享信息很多时候都是通过分享链接来实现的，比如说说、日志、群聊等等。一个奇长无比链接分享出来，特别恶心人。以及微博等社交软件发表、分享通常有字数限制。此时，短链需求应运而生。</p><a id="more"></a><h2 id="短链原理"><a href="#短链原理" class="headerlink" title="短链原理"></a>短链原理</h2><p>将一个url部分冗长的信息通过哈希算法进行压缩，并建立哈希值与原链之间的映射。每当通过短链访问时，后端服务就通过短链中的哈希值找到对应的原链，然后通过请求转发或者重定向的方式转至原链接内容。</p><h2 id="短链算法"><a href="#短链算法" class="headerlink" title="短链算法"></a>短链算法</h2><p>基于以上原理可知，任何一种哈希算法都可以作为短链生成的算法基础，这里给大家看到的是市面上广泛采用的基于MD5的算法。</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> md5  = <span class="built_in">require</span>(<span class="string">'./md5'</span>).md5;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLinkShort</span>(<span class="params">base,url</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> key = <span class="string">'alexis'</span>;</span><br><span class="line"><span class="keyword">var</span> urlhash = md5(key,url);</span><br><span class="line"><span class="keyword">var</span> len = urlhash.length;</span><br><span class="line"><span class="keyword">var</span> charset = <span class="string">'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'</span>;</span><br><span class="line"><span class="keyword">var</span> shortUrlList = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">//将加密后的串分成4段，每段4字节，对每段进行计算，一共可以生成四组短连接</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> urlhashPiece = urlhash.substr(i * len / <span class="number">4</span>, len / <span class="number">4</span>);</span><br><span class="line">    <span class="comment">//将分段的位与0x3fffffff做位与，0x3fffffff表示二进制数的30个1，即30位以后的加密串都归零</span></span><br><span class="line">    <span class="keyword">var</span> hex = <span class="built_in">parseInt</span>(urlhashPiece,<span class="number">16</span>) &amp; <span class="number">0x3fffffff</span>; <span class="comment">//此处需要用到hexdec()将16进制字符串转为10进制数值型，否则运算会不正常</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> shortUrl = base;</span><br><span class="line">    <span class="comment">//生成6位短连接</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++) &#123;</span><br><span class="line">        <span class="comment">//将得到的值与0x0000003d,3d为61，即charset的坐标最大值</span></span><br><span class="line">        shortUrl += charset.charAt(hex &amp; <span class="number">0x0000003d</span>);</span><br><span class="line">        <span class="comment">//循环完以后将hex右移5位</span></span><br><span class="line">        hex = hex &gt;&gt; <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    shortUrlList.push(shortUrl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> shortUrlList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getLinkShort(<span class="string">'http://t.cn/'</span>,<span class="string">'http://www.baidu.com'</span>));</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ &apos;http://t.cn/vDS0KK&apos;,</span><br><span class="line">  &apos;http://t.cn/vvDCO4&apos;,</span><br><span class="line">  &apos;http://t.cn/b984CK&apos;,</span><br><span class="line">  &apos;http://t.cn/ebfzHS&apos; ]</span><br></pre></td></tr></table></figure><p>可以看到上面的方法生成了四个短链，可根据需要，采取其中一个作为短链即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;何为短链&quot;&gt;&lt;a href=&quot;#何为短链&quot; class=&quot;headerlink&quot; title=&quot;何为短链&quot;&gt;&lt;/a&gt;何为短链&lt;/h2&gt;&lt;p&gt;短链：即一个较短的链接地址，这个链接地址通常指的是url。&lt;/p&gt;
&lt;h2 id=&quot;为什么需要短链&quot;&gt;&lt;a href=&quot;#为什么需要短链&quot; class=&quot;headerlink&quot; title=&quot;为什么需要短链&quot;&gt;&lt;/a&gt;为什么需要短链&lt;/h2&gt;&lt;p&gt;现而今，互联网无处不在。我们无时无刻都在上网，查看信息，分享信息。而分享信息很多时候都是通过分享链接来实现的，比如说说、日志、群聊等等。一个奇长无比链接分享出来，特别恶心人。以及微博等社交软件发表、分享通常有字数限制。此时，短链需求应运而生。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://blog.aoshiguchen.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="短链生成" scheme="http://blog.aoshiguchen.com/categories/%E7%AE%97%E6%B3%95/%E7%9F%AD%E9%93%BE%E7%94%9F%E6%88%90/"/>
    
    
      <category term="短链" scheme="http://blog.aoshiguchen.com/tags/%E7%9F%AD%E9%93%BE/"/>
    
      <category term="算法" scheme="http://blog.aoshiguchen.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="js" scheme="http://blog.aoshiguchen.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>linux下安装jdk8</title>
    <link href="http://blog.aoshiguchen.com/2017/12/22/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/jdk/linux%E4%B8%8B%E5%AE%89%E8%A3%85jdk8/"/>
    <id>http://blog.aoshiguchen.com/2017/12/22/开发工具/jdk/linux下安装jdk8/</id>
    <published>2017-12-21T16:00:00.000Z</published>
    <updated>2017-12-22T05:41:02.792Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载jdk8安装包"><a href="#下载jdk8安装包" class="headerlink" title="下载jdk8安装包"></a>下载jdk8安装包</h3><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p><a id="more"></a><img src="/2017/12/22/开发工具/jdk/linux下安装jdk8/01.png"><h3 id="拷贝到指定目录下（比如：-usr-package）"><a href="#拷贝到指定目录下（比如：-usr-package）" class="headerlink" title="拷贝到指定目录下（比如：/usr/package）"></a>拷贝到指定目录下（比如：/usr/package）</h3><h3 id="解压到安装目录下-比如-usr-soft-java"><a href="#解压到安装目录下-比如-usr-soft-java" class="headerlink" title="解压到安装目录下(比如:/usr/soft/java)"></a>解压到安装目录下(比如:/usr/soft/java)</h3><p>tar -zxvf jdk-8u121-linux-x64.gz -C /usr/soft/java</p><h3 id="建立一个连接，方便引用-可以跳过"><a href="#建立一个连接，方便引用-可以跳过" class="headerlink" title="建立一个连接，方便引用(可以跳过)"></a>建立一个连接，方便引用(可以跳过)</h3><p>ln -s /usr/soft/java/jdk1.8.0_121/ /usr/jdk</p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>vim /etc/profile</p><p>JAVA_HOME=/usr/jdk</p><p>CLASSPATH=$JAVA_HOME/lib/</p><p>PATH=$PATH:$JAVA_HOME/bin</p><p>export PATH JAVA_HOME CLASSPATH</p><h3 id="让环境变量生效"><a href="#让环境变量生效" class="headerlink" title="让环境变量生效"></a>让环境变量生效</h3><p>执行 source /etc/profile</p><p>或者 sudo shutdown -r now</p><img src="/2017/12/22/开发工具/jdk/linux下安装jdk8/02.png"><h3 id="验证安装是否成功"><a href="#验证安装是否成功" class="headerlink" title="验证安装是否成功"></a>验证安装是否成功</h3><p>java -version</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;下载jdk8安装包&quot;&gt;&lt;a href=&quot;#下载jdk8安装包&quot; class=&quot;headerlink&quot; title=&quot;下载jdk8安装包&quot;&gt;&lt;/a&gt;下载jdk8安装包&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://blog.aoshiguchen.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="jdk" scheme="http://blog.aoshiguchen.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/jdk/"/>
    
    
      <category term="开发工具" scheme="http://blog.aoshiguchen.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="linux" scheme="http://blog.aoshiguchen.com/tags/linux/"/>
    
      <category term="jdk" scheme="http://blog.aoshiguchen.com/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>javaweb获取客户端真实ip</title>
    <link href="http://blog.aoshiguchen.com/2017/12/22/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java/javaweb%E8%8E%B7%E5%8F%96%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9C%9F%E5%AE%9Eip/"/>
    <id>http://blog.aoshiguchen.com/2017/12/22/编程语言/java/javaweb获取客户端真实ip/</id>
    <published>2017-12-21T16:00:00.000Z</published>
    <updated>2017-12-22T05:17:09.714Z</updated>
    
    <content type="html"><![CDATA[<p>在安全性要求较高的web项目中，我们经常有这样的需求:</p><ul><li><p>黑名单：禁止指定ip访问。</p></li><li><p>白名单：允许指定ip访问。</p></li><li><p>根据ip追踪恶意入侵系统者。</p></li></ul><a id="more"></a><p>在java中我们通常可以这样获取客户端ip地址：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getRemoteAddr()</span><br></pre></td></tr></table></figure></p><p>但是这个方法有个弊端，就是如果对方使用了反向代理，那么这个方法获取到的永远都是反向代理服务器的ip，而并非用户的真实ip。这样也能达到禁止访问的目的，但是对于已经发生的恶意入侵，我们却无法定位到真实的用户主机。</p><p>当你遇到类似的问题时，那么下面的代码就能够很好的帮助你。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getClientIP</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">String ip = request.getHeader(<span class="string">"X-Forwarded-For"</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotEmpty(ip) &amp;&amp; !<span class="string">"unKnown"</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">    <span class="comment">// 多次反向代理后会有多个ip值，第一个ip才是真实ip</span></span><br><span class="line">    <span class="keyword">int</span> index = ip.indexOf(<span class="string">","</span>);</span><br><span class="line">    <span class="keyword">if</span> (index != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ip.substring(<span class="number">0</span>, index);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ip;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ip = request.getHeader(<span class="string">"X-Real-IP"</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotEmpty(ip) &amp;&amp; !<span class="string">"unKnown"</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">    <span class="keyword">return</span> ip;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> request.getRemoteAddr();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在安全性要求较高的web项目中，我们经常有这样的需求:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;黑名单：禁止指定ip访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;白名单：允许指定ip访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;根据ip追踪恶意入侵系统者。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://blog.aoshiguchen.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="java" scheme="http://blog.aoshiguchen.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java/"/>
    
    
      <category term="java" scheme="http://blog.aoshiguchen.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>1、在linux上搭建svn服务</title>
    <link href="http://blog.aoshiguchen.com/2017/12/21/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Svn/1%E3%80%81%E5%9C%A8linux%E4%B8%8A%E6%90%AD%E5%BB%BAsvn%E6%9C%8D%E5%8A%A1/"/>
    <id>http://blog.aoshiguchen.com/2017/12/21/开发工具/Svn/1、在linux上搭建svn服务/</id>
    <published>2017-12-20T16:00:00.000Z</published>
    <updated>2017-12-21T07:34:06.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>操作系统 CentOS 7.2 64位</li><li>CPU 1核</li><li>内存 1GB</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>yum install subversion</p></blockquote><a id="more"></a><h2 id="查看安装位置："><a href="#查看安装位置：" class="headerlink" title="查看安装位置："></a>查看安装位置：</h2><blockquote><p>rpm -ql subversion</p></blockquote><img src="/2017/12/21/开发工具/Svn/1、在linux上搭建svn服务/01.png"><h2 id="查看svn的版本"><a href="#查看svn的版本" class="headerlink" title="查看svn的版本"></a>查看svn的版本</h2><blockquote><p>/usr/bin/svnversion –version</p></blockquote><img src="/2017/12/21/开发工具/Svn/1、在linux上搭建svn服务/02.png"><h2 id="创建svn版本库根目录"><a href="#创建svn版本库根目录" class="headerlink" title="创建svn版本库根目录"></a>创建svn版本库根目录</h2><blockquote><p>mkdir -p /usr/repo/svn</p></blockquote><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><blockquote><p>svnadmin create /usr/repo/svn/test1<br>执行了这个命令之后会在/usr/repo/svn/test1目录下生成如下这些文件:</p></blockquote><img src="/2017/12/21/开发工具/Svn/1、在linux上搭建svn服务/03.png"><h2 id="修改svn配置"><a href="#修改svn配置" class="headerlink" title="修改svn配置"></a>修改svn配置</h2><p>进入conf目录<br>authz文件是权限控制文件<br>passwd是帐号密码文件<br>svnserve.conf SVN服务配置文件</p><h3 id="设置帐号密码"><a href="#设置帐号密码" class="headerlink" title="设置帐号密码"></a>设置帐号密码</h3><p>vi passwd<br>在[users]块中添加用户和密码，格式：帐号=密码，如yangwen = 123456</p><h3 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h3><p>vi authz<br>在末尾添加如下代码：<br>[/]<br>yangwen=rw<br>w=r<br>意思是版本库的根目录dan对其有读写权限，w只有读权限。</p><h3 id="修改svnserve-conf文件"><a href="#修改svnserve-conf文件" class="headerlink" title="修改svnserve.conf文件"></a>修改svnserve.conf文件</h3><p>vi svnserve.conf<br>打开下面的几个注释：<br>anon-access = read #匿名用户可读<br>auth-access = write #授权用户可写<br>password-db = passwd #使用哪个文件作为账号文件<br>authz-db = authz #使用哪个文件作为权限文件<br>realm = /var/svn/svnrepos # 认证空间名，版本库所在目录</p><h2 id="启动svn版本库"><a href="#启动svn版本库" class="headerlink" title="启动svn版本库"></a>启动svn版本库</h2><blockquote><p>svnserve -d -r /usr/repo/svn</p></blockquote><h2 id="查看是否启动成功"><a href="#查看是否启动成功" class="headerlink" title="查看是否启动成功"></a>查看是否启动成功</h2><blockquote><p>ps aux | grep svnserve<br>执行命令，结果如下：</p></blockquote><img src="/2017/12/21/开发工具/Svn/1、在linux上搭建svn服务/04.png"><h2 id="在Windows上测试"><a href="#在Windows上测试" class="headerlink" title="在Windows上测试"></a>在Windows上测试</h2><blockquote><p>Checkout: svn://118.89.63.66/test1</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;操作系统 CentOS 7.2 64位&lt;/li&gt;
&lt;li&gt;CPU 1核&lt;/li&gt;
&lt;li&gt;内存 1GB&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;yum install subversion&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://blog.aoshiguchen.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="svn" scheme="http://blog.aoshiguchen.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/svn/"/>
    
    
      <category term="开发工具" scheme="http://blog.aoshiguchen.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="linux" scheme="http://blog.aoshiguchen.com/tags/linux/"/>
    
      <category term="svn" scheme="http://blog.aoshiguchen.com/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title>用java实现一个简单的深度神经网络</title>
    <link href="http://blog.aoshiguchen.com/2017/12/21/%E7%AE%97%E6%B3%95/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/0.0.1/java/%E7%94%A8java%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>http://blog.aoshiguchen.com/2017/12/21/算法/深度学习/0.0.1/java/用java实现一个简单的深度神经网络/</id>
    <published>2017-12-20T16:00:00.000Z</published>
    <updated>2017-12-26T11:39:46.860Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初识神经网络"><a href="#初识神经网络" class="headerlink" title="初识神经网络"></a>初识神经网络</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>硬编码的智能：人工智能早期，用以实现专家系统。特点，实现难度高，并且难以适应变化。</li><li>机器学习：程序本身不编码实现任何解决具体问题的方法，而是模仿生物的进化、认知，能够不断地从周围环境中获取数据进行学习。特点：实现难度相较于上一个简单，但是需要大量数据，训练的方法也很重要，能够适应变化解决各种新的问题。</li></ul><a id="more"></a><h3 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h3><ul><li><p>外界信号通过你的眼睛、鼻子、舌头等等一系列感知器官（输入）捕获后传入大脑皮层（这个我也不清除，先假装是的），大脑皮层是第一层神经元，经过第一层处理后，然后传入第二层、第三层，最终经过n层处理后得到结果，所以我们能够对纷繁复杂的世界产生正确的认知。</p></li><li><p>深度神经网络算法，就是基于人脑认知事务进行学习的这一特性的算法。初始数据经由多层神经元的计算后得到输出，刚开始时可能会有较大的误差，这时就需要我们的训练。</p></li><li><p>训练分为监督式训练、无监督训练。这里我们讲的是监督式训练。</p></li></ul><h3 id="监督式训练："><a href="#监督式训练：" class="headerlink" title="监督式训练："></a>监督式训练：</h3><p>给出一组样本数据，以及对应的正确期望结果。让神经网络不断学习，神经网络会在学习的过程中不断地矫正神经元连接的突触的权值、动量系数等等。理论上经过若干次的训练后，这个神经网络就会调整为一个最佳的情况，这时，对给定的输入，能够在比较大的概率下给出正确的结果。</p><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BpDeep</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span>[][] layer;<span class="comment">//神经网络各层节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span>[][] layerErr;<span class="comment">//神经网络各节点误差</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span>[][][] layer_weight;<span class="comment">//各层节点权重</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span>[][][] layer_weight_delta;<span class="comment">//各层节点权重动量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> mobp;<span class="comment">//动量系数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> rate;<span class="comment">//学习系数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BpDeep</span><span class="params">(<span class="keyword">int</span>[] layernum, <span class="keyword">double</span> rate, <span class="keyword">double</span> mobp)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.mobp = mobp;</span><br><span class="line"><span class="keyword">this</span>.rate = rate;</span><br><span class="line">layer = <span class="keyword">new</span> <span class="keyword">double</span>[layernum.length][];</span><br><span class="line">layerErr = <span class="keyword">new</span> <span class="keyword">double</span>[layernum.length][];</span><br><span class="line">layer_weight = <span class="keyword">new</span> <span class="keyword">double</span>[layernum.length][][];</span><br><span class="line">layer_weight_delta = <span class="keyword">new</span> <span class="keyword">double</span>[layernum.length][][];</span><br><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;layernum.length;l++)&#123;</span><br><span class="line">layer[l]=<span class="keyword">new</span> <span class="keyword">double</span>[layernum[l]];</span><br><span class="line">layerErr[l]=<span class="keyword">new</span> <span class="keyword">double</span>[layernum[l]];</span><br><span class="line"><span class="keyword">if</span>(l+<span class="number">1</span>&lt;layernum.length)&#123;</span><br><span class="line">layer_weight[l]=<span class="keyword">new</span> <span class="keyword">double</span>[layernum[l]+<span class="number">1</span>][layernum[l+<span class="number">1</span>]];</span><br><span class="line">layer_weight_delta[l]=<span class="keyword">new</span> <span class="keyword">double</span>[layernum[l]+<span class="number">1</span>][layernum[l+<span class="number">1</span>]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;layernum[l]+<span class="number">1</span>;j++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;layernum[l+<span class="number">1</span>];i++)</span><br><span class="line">layer_weight[l][j][i]=random.nextDouble();<span class="comment">//随机初始化权重</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//逐层向前计算输出</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span>[] computeOut(<span class="keyword">double</span>[] in)&#123; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>;l&lt;layer.length;l++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;layer[l].length;j++)&#123;</span><br><span class="line"><span class="keyword">double</span> z=layer_weight[l-<span class="number">1</span>][layer[l-<span class="number">1</span>].length][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;layer[l-<span class="number">1</span>].length;i++)&#123;</span><br><span class="line">layer[l-<span class="number">1</span>][i]=l==<span class="number">1</span>?in[i]:layer[l-<span class="number">1</span>][i];</span><br><span class="line">z+=layer_weight[l-<span class="number">1</span>][i][j]*layer[l-<span class="number">1</span>][i];</span><br><span class="line">&#125;</span><br><span class="line">layer[l][j]=<span class="number">1</span>/(<span class="number">1</span>+Math.exp(-z));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> layer[layer.length-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//逐层反向计算误差并修改权重</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateWeight</span><span class="params">(<span class="keyword">double</span>[] tar)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=layer.length-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;layerErr[l].length;j++)</span><br><span class="line">layerErr[l][j]=layer[l][j]*(<span class="number">1</span>-layer[l][j])*(tar[j]-layer[l][j]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(l--&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;layerErr[l].length;j++)&#123;</span><br><span class="line"><span class="keyword">double</span> z = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;layerErr[l+<span class="number">1</span>].length;i++)&#123;</span><br><span class="line">z=z+l&gt;<span class="number">0</span>?layerErr[l+<span class="number">1</span>][i]*layer_weight[l][j][i]:<span class="number">0</span>;</span><br><span class="line">layer_weight_delta[l][j][i]= mobp*layer_weight_delta[l][j][i]+rate*layerErr[l+<span class="number">1</span>][i]*layer[l][j];<span class="comment">//隐含层动量调整</span></span><br><span class="line">layer_weight[l][j][i]+=layer_weight_delta[l][j][i];<span class="comment">//隐含层权重调整</span></span><br><span class="line"><span class="keyword">if</span>(j==layerErr[l].length-<span class="number">1</span>)&#123;</span><br><span class="line">layer_weight_delta[l][j+<span class="number">1</span>][i]= mobp*layer_weight_delta[l][j+<span class="number">1</span>][i]+rate*layerErr[l+<span class="number">1</span>][i];<span class="comment">//截距动量调整</span></span><br><span class="line">layer_weight[l][j+<span class="number">1</span>][i]+=layer_weight_delta[l][j+<span class="number">1</span>][i];<span class="comment">//截距权重调整</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">layerErr[l][j]=z*layer[l][j]*(<span class="number">1</span>-layer[l][j]);<span class="comment">//记录误差</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">train</span><span class="params">(<span class="keyword">double</span>[] in, <span class="keyword">double</span>[] tar)</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span>[] out = computeOut(in);</span><br><span class="line">updateWeight(tar);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BpDeepTest</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//初始化神经网络的基本配置</span></span><br><span class="line">BpDeep bp = <span class="keyword">new</span> BpDeep(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">10</span>,<span class="number">2</span>&#125;, <span class="number">0.15</span>, <span class="number">0.8</span>);</span><br><span class="line"><span class="comment">//BpDeep bp = new BpDeep(new int[]&#123;2,10,1&#125;, 0.15, 0.8);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置样本数据</span></span><br><span class="line"><span class="keyword">double</span>[][] data = <span class="keyword">new</span> <span class="keyword">double</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">2</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">2</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//设置目标数据</span></span><br><span class="line"><span class="keyword">double</span>[][] target = <span class="keyword">new</span> <span class="keyword">double</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//double[][] target = new double[][]&#123;&#123;1&#125;,&#123;0&#125;,&#123;0&#125;,&#123;1&#125;&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//迭代训练</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>;n&lt;<span class="number">5000</span>;n++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;data.length;i++)</span><br><span class="line">bp.train(data[i], target[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;data.length;j++)&#123;</span><br><span class="line"><span class="keyword">double</span>[] result = bp.computeOut(data[j]);</span><br><span class="line">System.out.println(Arrays.toString(data[j])+<span class="string">":"</span>+Arrays.toString(result));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span>[] x = <span class="keyword">new</span> <span class="keyword">double</span>[]&#123;<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">double</span>[] result = bp.computeOut(x);</span><br><span class="line">System.out.println(Arrays.toString(x)+<span class="string">":"</span>+Arrays.toString(result));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BpDeepTest2</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">BpDeep bp = <span class="keyword">new</span> BpDeep(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>,<span class="number">20</span>,<span class="number">1</span>&#125;, <span class="number">0.4</span>, <span class="number">0.001</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span>[][] data = getData();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>;n&lt;<span class="number">1000</span>;n++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;data.length;i++)</span><br><span class="line">bp.train(<span class="keyword">new</span> <span class="keyword">double</span>[]&#123;data[i][<span class="number">0</span>]&#125;, <span class="keyword">new</span> <span class="keyword">double</span>[]&#123;data[i][<span class="number">1</span>]&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"训练结果:"</span>);</span><br><span class="line"><span class="keyword">double</span> rate = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> successCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;data.length;j++)&#123;</span><br><span class="line"><span class="keyword">double</span>[] result = bp.computeOut(data[j]);</span><br><span class="line">System.out.println(data[j][<span class="number">0</span>] + <span class="string">":"</span> + result[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(((<span class="keyword">int</span>)(result[<span class="number">0</span>]*<span class="number">2</span>)) == data[j][<span class="number">1</span>])&#123;</span><br><span class="line">successCount++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rate = (successCount * <span class="number">1.0</span>) / data.length;</span><br><span class="line">System.out.printf(<span class="string">"rate:%.2f\n"</span>,rate);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"验证:"</span>);</span><br><span class="line"><span class="keyword">double</span>[] x = <span class="keyword">new</span> <span class="keyword">double</span>[]&#123;<span class="number">201</span>,<span class="number">202</span>,<span class="number">203</span>,<span class="number">204</span>,<span class="number">205</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;x.length;j++)&#123;</span><br><span class="line"><span class="keyword">double</span>[] result = bp.computeOut(<span class="keyword">new</span> <span class="keyword">double</span>[]&#123;x[j]&#125;);</span><br><span class="line">System.out.println(x[j] + <span class="string">":"</span> + result[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span>[][] getData() <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">List&lt;Double[]&gt; list = <span class="keyword">new</span> ArrayList&lt;Double[]&gt;();</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> FileInputStream(<span class="string">"data.txt"</span>));</span><br><span class="line"><span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line"><span class="keyword">double</span> a = scanner.nextDouble();</span><br><span class="line"><span class="keyword">double</span> b = scanner.nextDouble();</span><br><span class="line"></span><br><span class="line">list.add(<span class="keyword">new</span> Double[]&#123;a,b&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span>[][] result = <span class="keyword">new</span> <span class="keyword">double</span>[list.size()][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; list.size();i++)&#123;</span><br><span class="line">result[i][<span class="number">0</span>] = list.get(i)[<span class="number">0</span>];</span><br><span class="line">result[i][<span class="number">1</span>] = list.get(i)[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>data.txt中的数据如下：<br>0 1<br>1 0<br>2 1<br>3 0<br>4 1<br>5 0<br>6 1<br>7 0<br>8 1<br>9 0<br>10 1<br>11 0<br>12 1<br>13 0<br>14 1<br>15 0<br>16 1<br>17 0<br>18 1<br>19 0<br>20 1</p><h2 id="运行演示"><a href="#运行演示" class="headerlink" title="运行演示"></a>运行演示</h2><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>问题：我们需要将笛卡尔坐标系中的点按照y=x分界线，分成两类。</p><p>样本数据：{1,2},{2,2},{1,1},{2,1}<br>期望数据：{1,0},{0,1},{0,1},{1,0}</p><p>每组输入数据个数为2，所以第一层神经元的个数为2<br>每组对应输出结果个数为2，所以最后一层神经元个数为2</p><p>{1,0}、{0,1} 分别对应两种结果。</p><h3 id="代码简单解释"><a href="#代码简单解释" class="headerlink" title="代码简单解释"></a>代码简单解释</h3><p>BpDeep bp = new BpDeep(new int[]{2,10,2}, 0.15, 0.8);<br>这是构造一个深度神经网络。第一个参数为一个一维数组，数组的长度为3，表示这个神经网络<br>一共3层。第一个元素为2表示第一层2个神经元，最后一个元素为2，表示最后一层2个神经元。<br>后面的0.15、0.8是动量系数还有啥的，现在说你们也不懂，先不说了，这两个数字可以随便改。<br>0到1之间的一个数字，对算法的学习效率有些影响，不影响逻辑。</p><p>后面的样本数据和目标数据就不说了，我们直接看结果。</p><h3 id="示例运行"><a href="#示例运行" class="headerlink" title="示例运行"></a>示例运行</h3><p>这四个是训练的结果：<br>[1.0, 2.0]:[0.9792365424853283, 0.020600382812002088]<br>上面对应的样本为：{1,2} {1,0}<br>[2.0, 2.0]:[0.02256564436382444, 0.9773361523239155]<br>上面对应的样本为：{2,2} {0,1}<br>[1.0, 1.0]:[0.016761474334048444, 0.9837176729362672]<br>上面对应的样本为：{1,1} {0,1}<br>[2.0, 1.0]:[0.9793917240613336, 0.02048522092272838]<br>上面对应的样本为：{2,1} {1,0}</p><p>这一个是训练结束后，测试的数据：<br>[3.0, 1.0]:[0.9899489337264226, 0.009920676075267004]<br>所以得到结果：{3,1}属于分类：{1,0}</p><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><p>问题：将整数划分为正数和负数两类。暂不考虑0，样本数据如下：<br>-5 0<br>-4 0<br>-3 0<br>-2 0<br>-1 0<br>1 1<br>2 1<br>3 1<br>4 1<br>5 1</p><p>负数输出0，整数输出1。训练完成后，验证数据如下：<br>100:1<br>-10:0<br>63:1<br>50:1<br>-9:0<br>75:1<br>55:1<br>63:1</p><h2 id="进阶方向"><a href="#进阶方向" class="headerlink" title="进阶方向"></a>进阶方向</h2><ul><li><p>参数调优：<br>本示例中并没有测试动量系数和学习稀疏的不同会给学习效率带来何种影响，但这个事实上决定着<br>学习结果的效率。</p></li><li><p>激活函数：<br>还有就是算法中使用的激活函数为：1/(1+Math.exp(-z))。这是目前业界用的非常广泛的一个激活<br>函数，这个函数自己可以随便换，不同的激活函数对学习也有重大的影响。设计不好的激活函数，<br>可能导致极难快速收敛。</p></li><li><p>输入输出的定义：<br>任何数据都可以归结为一个一维数组信号，所有的分类结果都可以归结为一组0和1组成的一维数组。</p></li></ul><p>在示例1中，将两个类别定义为{1,0} {0,1}<br>在示例2中，将两个类别定义为0 1<br>这个自己可以视情况而定，无有定解。</p><ul><li>神经网络的神经元层数、个数：<br>从上我们可以看到，决定第一层神经元数量的是输入数据，决定最后一层神经元数量的是输出数据。<br>而中间的神经元层数、个数自己可以视情况而定，没有理论证明多少层更合适。这个需要自己<br>不断尝试调优。一个基本的方向是，问题越复杂，需要的神经元数量、层数会越多。因此计算的<br>效率也会越低</li></ul><p>本算法是一个简化版的深度学习算法，非常简短。要解决稍复杂的问题，可能训练特别耗时，这只是一个单机实现，如果用上云计算，它的优势才能充分的体现出来。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;初识神经网络&quot;&gt;&lt;a href=&quot;#初识神经网络&quot; class=&quot;headerlink&quot; title=&quot;初识神经网络&quot;&gt;&lt;/a&gt;初识神经网络&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;硬编码的智能：人工智能早期，用以实现专家系统。特点，实现难度高，并且难以适应变化。&lt;/li&gt;
&lt;li&gt;机器学习：程序本身不编码实现任何解决具体问题的方法，而是模仿生物的进化、认知，能够不断地从周围环境中获取数据进行学习。特点：实现难度相较于上一个简单，但是需要大量数据，训练的方法也很重要，能够适应变化解决各种新的问题。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="算法" scheme="http://blog.aoshiguchen.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="深度学习" scheme="http://blog.aoshiguchen.com/categories/%E7%AE%97%E6%B3%95/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java" scheme="http://blog.aoshiguchen.com/tags/java/"/>
    
      <category term="算法" scheme="http://blog.aoshiguchen.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="深度学习" scheme="http://blog.aoshiguchen.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="神经网络" scheme="http://blog.aoshiguchen.com/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>msi文件安装错误</title>
    <link href="http://blog.aoshiguchen.com/2017/12/21/%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6/msi%E6%96%87%E4%BB%B6%E5%AE%89%E8%A3%85%E9%94%99%E8%AF%AF/"/>
    <id>http://blog.aoshiguchen.com/2017/12/21/系统软件/msi文件安装错误/</id>
    <published>2017-12-20T16:00:00.000Z</published>
    <updated>2017-12-21T02:13:42.185Z</updated>
    
    <content type="html"><![CDATA[<p>1、错误代码为2502、2503的情况下，用如下方法解决</p><p>首先用管理员身份打开命令行，然后用如下命令进行安装：<br>msiexec /package 路径</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、错误代码为2502、2503的情况下，用如下方法解决&lt;/p&gt;
&lt;p&gt;首先用管理员身份打开命令行，然后用如下命令进行安装：&lt;br&gt;msiexec /package 路径&lt;/p&gt;

      
    
    </summary>
    
      <category term="系统软件" scheme="http://blog.aoshiguchen.com/categories/%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="系统软件" scheme="http://blog.aoshiguchen.com/tags/%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="安装" scheme="http://blog.aoshiguchen.com/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>插件</title>
    <link href="http://blog.aoshiguchen.com/2017/12/21/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/eclipse/%E6%8F%92%E4%BB%B6/"/>
    <id>http://blog.aoshiguchen.com/2017/12/21/开发工具/eclipse/插件/</id>
    <published>2017-12-20T16:00:00.000Z</published>
    <updated>2017-12-22T05:18:34.512Z</updated>
    
    <content type="html"><![CDATA[<p>drools： <a href="http://download.jboss.org/drools/release/5.5.0.Final/org.drools.updatesite/" target="_blank" rel="noopener">http://download.jboss.org/drools/release/5.5.0.Final/org.drools.updatesite/</a><br>Groovy:  <a href="http://dist.springsource.org/release/GRECLIPSE/e4.3/" target="_blank" rel="noopener">http://dist.springsource.org/release/GRECLIPSE/e4.3/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;drools： &lt;a href=&quot;http://download.jboss.org/drools/release/5.5.0.Final/org.drools.updatesite/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://downl
      
    
    </summary>
    
      <category term="开发工具" scheme="http://blog.aoshiguchen.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="eclipse" scheme="http://blog.aoshiguchen.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/eclipse/"/>
    
    
      <category term="开发工具" scheme="http://blog.aoshiguchen.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="插件" scheme="http://blog.aoshiguchen.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="eclipse" scheme="http://blog.aoshiguchen.com/tags/eclipse/"/>
    
  </entry>
  
  <entry>
    <title>1、在linux上搭建Git服务</title>
    <link href="http://blog.aoshiguchen.com/2017/12/21/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Git/1%E3%80%81%E5%9C%A8linux%E4%B8%8A%E6%90%AD%E5%BB%BAGit%E6%9C%8D%E5%8A%A1/"/>
    <id>http://blog.aoshiguchen.com/2017/12/21/开发工具/Git/1、在linux上搭建Git服务/</id>
    <published>2017-12-20T16:00:00.000Z</published>
    <updated>2017-12-22T08:07:48.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>操作系统 CentOS 7.2 64位</li><li>CPU 1核</li><li>内存 1GB</li></ul><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><blockquote><p>yum install -y git</p></blockquote><a id="more"></a><h2 id="查看安装版本"><a href="#查看安装版本" class="headerlink" title="查看安装版本"></a>查看安装版本</h2><blockquote><p>git –version</p></blockquote><img src="/2017/12/21/开发工具/Git/1、在linux上搭建Git服务/01.png"><h2 id="创建Git用户，并为Git用户设置密码"><a href="#创建Git用户，并为Git用户设置密码" class="headerlink" title="创建Git用户，并为Git用户设置密码"></a>创建Git用户，并为Git用户设置密码</h2><blockquote><p>useradd git<br>passwd git  （12345678）</p></blockquote><h2 id="创建Git仓库"><a href="#创建Git仓库" class="headerlink" title="创建Git仓库"></a>创建Git仓库</h2><blockquote><p>mkdir -p /usr/repo/git/test1.git<br>git init –bare /usr/repo/git/test1.git<br>cd /usr/repo/git/<br>chown -R git:git test1.git</p></blockquote><h2 id="客户端clone远程仓库"><a href="#客户端clone远程仓库" class="headerlink" title="客户端clone远程仓库"></a>客户端clone远程仓库</h2><blockquote><p>git clone git@118.89.63.66:/usr/repo/git/test1.git</p></blockquote><h2 id="客户端创建SSH公钥和私钥"><a href="#客户端创建SSH公钥和私钥" class="headerlink" title="客户端创建SSH公钥和私钥"></a>客户端创建SSH公钥和私钥</h2><p>客户端第一次clone会要求输入密码，此时可用SHH创建公钥、私钥。<br>在window客户端，git bash中执行以下命令：</p><blockquote><p>ssh-keygen -t rsa -C “1052045476@qq.com”  </p></blockquote><img src="/2017/12/21/开发工具/Git/1、在linux上搭建Git服务/02.png"><h2 id="服务器端Git打开RSA认证"><a href="#服务器端Git打开RSA认证" class="headerlink" title="服务器端Git打开RSA认证"></a>服务器端Git打开RSA认证</h2><p>进入 /etc/ssh 目录，编辑 sshd_config，打开以下三个配置的注释：<br>RSAAuthentication yes<br>PubkeyAuthentication yes<br>AuthorizedKeysFile .ssh/authorized_keys</p><h2 id="保存并重启-sshd-服务："><a href="#保存并重启-sshd-服务：" class="headerlink" title="保存并重启 sshd 服务："></a>保存并重启 sshd 服务：</h2><blockquote><p>service sshd restart</p></blockquote><h2 id="打开RSA认证"><a href="#打开RSA认证" class="headerlink" title="打开RSA认证"></a>打开RSA认证</h2><p>由 AuthorizedKeysFile 得知公钥的存放路径是 .ssh/authorized_keys，实际上是$Home/.ssh/authorized_keys，由于管理 Git 服务的用户是 git，所以实际存放公钥的路径是 /home/git/.ssh/authorized_keys<br>在 /home/git/ 下创建目录 .ssh</p><blockquote><p>cd /home/git<br>mkdir .ssh<br>chown -R git:git .ssh</p></blockquote><img src="/2017/12/21/开发工具/Git/1、在linux上搭建Git服务/03.png"><h2 id="将客户端公钥导入服务端-home-git-ssh-authorized-keys文件"><a href="#将客户端公钥导入服务端-home-git-ssh-authorized-keys文件" class="headerlink" title="将客户端公钥导入服务端 /home/git/.ssh/authorized_keys文件"></a>将客户端公钥导入服务端 /home/git/.ssh/authorized_keys文件</h2><blockquote><p>ssh git@118.89.63.66 ‘cat &gt;&gt; .ssh/authorized_keys’ &lt; ~/.ssh/id_rsa.pub</p></blockquote><img src="/2017/12/21/开发工具/Git/1、在linux上搭建Git服务/04.png"><p>此处输入git密码，（12345678）</p><p>回到服务器端，查看 .ssh 下是否存在 authorized_keys 文件：</p><img src="/2017/12/21/开发工具/Git/1、在linux上搭建Git服务/05.png"><h2 id="修改-ssh目录权限"><a href="#修改-ssh目录权限" class="headerlink" title="修改.ssh目录权限"></a>修改.ssh目录权限</h2><blockquote><p>chmod 700 .ssh<br>cd .ssh<br>chmod 600 authorized_keys </p></blockquote><h2 id="客户端clone仓库"><a href="#客户端clone仓库" class="headerlink" title="客户端clone仓库"></a>客户端clone仓库</h2><blockquote><p>git clone git@118.89.63.66:/usr/repo/git/test1.git</p></blockquote><h2 id="禁止git用户-ssh登录服务器"><a href="#禁止git用户-ssh登录服务器" class="headerlink" title="禁止git用户 ssh登录服务器"></a>禁止git用户 ssh登录服务器</h2><p>编辑 /etc/passwd<br>找到：<br>git:x:502:504::/home/git:/bin/bash<br>修改为<br>git:x:502:504::/home/git:/bin/git-shell<br>此时 git 用户可以正常通过 ssh 使用 git，但无法通过 ssh 登录系统。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;操作系统 CentOS 7.2 64位&lt;/li&gt;
&lt;li&gt;CPU 1核&lt;/li&gt;
&lt;li&gt;内存 1GB&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装Git&quot;&gt;&lt;a href=&quot;#安装Git&quot; class=&quot;headerlink&quot; title=&quot;安装Git&quot;&gt;&lt;/a&gt;安装Git&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;yum install -y git&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://blog.aoshiguchen.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Git" scheme="http://blog.aoshiguchen.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Git/"/>
    
    
      <category term="开发工具" scheme="http://blog.aoshiguchen.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="linux" scheme="http://blog.aoshiguchen.com/tags/linux/"/>
    
      <category term="Git" scheme="http://blog.aoshiguchen.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>昊沧十周年篝火晚会有感</title>
    <link href="http://blog.aoshiguchen.com/2015/10/23/%E6%96%87%E5%AD%A6/%E5%8F%A4%E8%AF%97%E8%AF%8D/%E6%98%8A%E6%B2%A7%E5%8D%81%E5%91%A8%E5%B9%B4%E7%AF%9D%E7%81%AB%E6%99%9A%E4%BC%9A%E6%9C%89%E6%84%9F/"/>
    <id>http://blog.aoshiguchen.com/2015/10/23/文学/古诗词/昊沧十周年篝火晚会有感/</id>
    <published>2015-10-22T16:00:00.000Z</published>
    <updated>2017-12-20T09:24:00.671Z</updated>
    
    <content type="html"><![CDATA[<p>一入西山气象新，餐厅未到笑先闻。<br>有望引来无望辈，盛情聚起重情人。<br>歌声袅袅难停笔，篝火轰轰欲举樽。<br>揽袖相邀谈十载，持杯共酒醉千巡。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一入西山气象新，餐厅未到笑先闻。&lt;br&gt;有望引来无望辈，盛情聚起重情人。&lt;br&gt;歌声袅袅难停笔，篝火轰轰欲举樽。&lt;br&gt;揽袖相邀谈十载，持杯共酒醉千巡。&lt;/p&gt;

      
    
    </summary>
    
      <category term="文学" scheme="http://blog.aoshiguchen.com/categories/%E6%96%87%E5%AD%A6/"/>
    
      <category term="古诗词" scheme="http://blog.aoshiguchen.com/categories/%E6%96%87%E5%AD%A6/%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    
    
      <category term="文学" scheme="http://blog.aoshiguchen.com/tags/%E6%96%87%E5%AD%A6/"/>
    
      <category term="古诗词" scheme="http://blog.aoshiguchen.com/tags/%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>何以成说</title>
    <link href="http://blog.aoshiguchen.com/2015/07/11/%E6%96%87%E5%AD%A6/%E5%8F%A4%E8%AF%97%E8%AF%8D/%E4%BD%95%E4%BB%A5%E6%88%90%E8%AF%B4/"/>
    <id>http://blog.aoshiguchen.com/2015/07/11/文学/古诗词/何以成说/</id>
    <published>2015-07-10T16:00:00.000Z</published>
    <updated>2017-12-21T01:39:28.982Z</updated>
    
    <content type="html"><![CDATA[<p>叶坠明时异，<br>花残料守空。<br>极寒觉地暖，<br>至寡悟杯兴。<br>有畏堪知死，<br>无诗不解风。<br>弱水三千任，<br>南柯一宿平。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;叶坠明时异，&lt;br&gt;花残料守空。&lt;br&gt;极寒觉地暖，&lt;br&gt;至寡悟杯兴。&lt;br&gt;有畏堪知死，&lt;br&gt;无诗不解风。&lt;br&gt;弱水三千任，&lt;br&gt;南柯一宿平。&lt;/p&gt;

      
    
    </summary>
    
      <category term="文学" scheme="http://blog.aoshiguchen.com/categories/%E6%96%87%E5%AD%A6/"/>
    
      <category term="古诗词" scheme="http://blog.aoshiguchen.com/categories/%E6%96%87%E5%AD%A6/%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    
    
      <category term="文学" scheme="http://blog.aoshiguchen.com/tags/%E6%96%87%E5%AD%A6/"/>
    
      <category term="古诗词" scheme="http://blog.aoshiguchen.com/tags/%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>贺上海昊沧系统控制技术有限责任公司成立十周年</title>
    <link href="http://blog.aoshiguchen.com/2015/01/04/%E6%96%87%E5%AD%A6/%E5%8F%A4%E8%AF%97%E8%AF%8D/%E8%B4%BA%E4%B8%8A%E6%B5%B7%E6%98%8A%E6%B2%A7%E7%B3%BB%E7%BB%9F%E6%8E%A7%E5%88%B6%E6%8A%80%E6%9C%AF%E6%9C%89%E9%99%90%E8%B4%A3%E4%BB%BB%E5%85%AC%E5%8F%B8%E6%88%90%E7%AB%8B%E5%8D%81%E5%91%A8%E5%B9%B4/"/>
    <id>http://blog.aoshiguchen.com/2015/01/04/文学/古诗词/贺上海昊沧系统控制技术有限责任公司成立十周年/</id>
    <published>2015-01-03T16:00:00.000Z</published>
    <updated>2017-12-21T01:34:35.057Z</updated>
    
    <content type="html"><![CDATA[<p>笔纵蓝天抒大业，情牵浩宇贺新春。<br>净化污水臧大义，得来锦绣沁人心。<br>智能防汛功如海，工艺仿真技超群。<br>十年磨剑锋方露，跃马扬鞭日可寻。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;笔纵蓝天抒大业，情牵浩宇贺新春。&lt;br&gt;净化污水臧大义，得来锦绣沁人心。&lt;br&gt;智能防汛功如海，工艺仿真技超群。&lt;br&gt;十年磨剑锋方露，跃马扬鞭日可寻。&lt;/p&gt;

      
    
    </summary>
    
      <category term="文学" scheme="http://blog.aoshiguchen.com/categories/%E6%96%87%E5%AD%A6/"/>
    
      <category term="古诗词" scheme="http://blog.aoshiguchen.com/categories/%E6%96%87%E5%AD%A6/%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    
    
      <category term="文学" scheme="http://blog.aoshiguchen.com/tags/%E6%96%87%E5%AD%A6/"/>
    
      <category term="古诗词" scheme="http://blog.aoshiguchen.com/tags/%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>1、asgc-web快速入门</title>
    <link href="http://blog.aoshiguchen.com/2014/12/22/%E6%A1%86%E6%9E%B6/asgc-web/1%E3%80%81asgc-web%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://blog.aoshiguchen.com/2014/12/22/框架/asgc-web/1、asgc-web快速入门/</id>
    <published>2014-12-21T16:00:00.000Z</published>
    <updated>2017-12-28T02:57:53.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><p>asgc-web是一款基于node的一站式web框架。因此，如果你的电脑上还没有安装node，请点击下面的链接按照步骤进行安装，安装的版本最好不低于8.0.</p><p><a href="https://www.cnblogs.com/pigtail/archive/2013/01/08/2850486.html" target="_blank" rel="noopener">如何安装node?</a></p><h2 id="安装asgc-web"><a href="#安装asgc-web" class="headerlink" title="安装asgc-web"></a>安装asgc-web</h2><blockquote><p>npm install asgc-web -g</p></blockquote><h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><p>安装完成之后，可以在命令行执行如下命令，如果安装成功，将显示asgc-web的版本号。</p><blockquote><p>asgc -v</p></blockquote><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><blockquote><p>asgc new [project]</p></blockquote><p>执行上面的命令，将在当前目录创建一个项目模板。参数project为项目名称，可不填，默认为demo。</p><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><blockquote><p>asgc start [port]</p></blockquote><p>进入项目根目录，执行以上命令，将启动一个asgc-web项目，port为端口号。port可不填，如果不填，则取项目根目录下的app.json里面配置的port为端口号。如果app.json不存在或者没有配置port，则默认取8088。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装node&quot;&gt;&lt;a href=&quot;#安装node&quot; class=&quot;headerlink&quot; title=&quot;安装node&quot;&gt;&lt;/a&gt;安装node&lt;/h2&gt;&lt;p&gt;asgc-web是一款基于node的一站式web框架。因此，如果你的电脑上还没有安装node，请点击下面的链
      
    
    </summary>
    
      <category term="框架" scheme="http://blog.aoshiguchen.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="asgc-web" scheme="http://blog.aoshiguchen.com/categories/%E6%A1%86%E6%9E%B6/asgc-web/"/>
    
    
      <category term="框架" scheme="http://blog.aoshiguchen.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="node" scheme="http://blog.aoshiguchen.com/tags/node/"/>
    
      <category term="asgc-web" scheme="http://blog.aoshiguchen.com/tags/asgc-web/"/>
    
  </entry>
  
  <entry>
    <title>赠小巢姐</title>
    <link href="http://blog.aoshiguchen.com/2014/10/04/%E6%96%87%E5%AD%A6/%E5%8F%A4%E8%AF%97%E8%AF%8D/%E8%B5%A0%E5%B0%8F%E5%B7%A2%E5%A7%90/"/>
    <id>http://blog.aoshiguchen.com/2014/10/04/文学/古诗词/赠小巢姐/</id>
    <published>2014-10-03T16:00:00.000Z</published>
    <updated>2017-12-20T09:21:24.822Z</updated>
    
    <content type="html"><![CDATA[<p>秀枝荏苒愈添香，浅笑红尘忆往常。<br>妍手绘花神韵染，奇思措句玉玑藏。<br>焉知明月撩窗影，可是青天唤远方。<br>好似断琴心外意，且于人海共流光。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;秀枝荏苒愈添香，浅笑红尘忆往常。&lt;br&gt;妍手绘花神韵染，奇思措句玉玑藏。&lt;br&gt;焉知明月撩窗影，可是青天唤远方。&lt;br&gt;好似断琴心外意，且于人海共流光。&lt;/p&gt;

      
    
    </summary>
    
      <category term="文学" scheme="http://blog.aoshiguchen.com/categories/%E6%96%87%E5%AD%A6/"/>
    
      <category term="古诗词" scheme="http://blog.aoshiguchen.com/categories/%E6%96%87%E5%AD%A6/%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    
    
      <category term="文学" scheme="http://blog.aoshiguchen.com/tags/%E6%96%87%E5%AD%A6/"/>
    
      <category term="古诗词" scheme="http://blog.aoshiguchen.com/tags/%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>蝶恋花-其一</title>
    <link href="http://blog.aoshiguchen.com/2014/07/16/%E6%96%87%E5%AD%A6/%E5%8F%A4%E8%AF%97%E8%AF%8D/%E8%9D%B6%E6%81%8B%E8%8A%B1-%E5%85%B6%E4%B8%80/"/>
    <id>http://blog.aoshiguchen.com/2014/07/16/文学/古诗词/蝶恋花-其一/</id>
    <published>2014-07-15T16:00:00.000Z</published>
    <updated>2017-12-20T09:20:34.273Z</updated>
    
    <content type="html"><![CDATA[<p>雨过窗前山色暗，<br>陋室无眠，<br>忍顾星云散。<br>一寸香烛谁共剪？<br>枝头惊落平沙雁。<br>信步危楼空缱绻，<br>緑蚁频添，<br>夜静人翻乱。<br>笔下双形天地远，<br>唯观诗酒如初见。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;雨过窗前山色暗，&lt;br&gt;陋室无眠，&lt;br&gt;忍顾星云散。&lt;br&gt;一寸香烛谁共剪？&lt;br&gt;枝头惊落平沙雁。&lt;br&gt;信步危楼空缱绻，&lt;br&gt;緑蚁频添，&lt;br&gt;夜静人翻乱。&lt;br&gt;笔下双形天地远，&lt;br&gt;唯观诗酒如初见。&lt;/p&gt;

      
    
    </summary>
    
      <category term="文学" scheme="http://blog.aoshiguchen.com/categories/%E6%96%87%E5%AD%A6/"/>
    
      <category term="古诗词" scheme="http://blog.aoshiguchen.com/categories/%E6%96%87%E5%AD%A6/%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    
    
      <category term="文学" scheme="http://blog.aoshiguchen.com/tags/%E6%96%87%E5%AD%A6/"/>
    
      <category term="古诗词" scheme="http://blog.aoshiguchen.com/tags/%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
</feed>
